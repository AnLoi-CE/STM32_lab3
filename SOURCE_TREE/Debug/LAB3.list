
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c60  08002c60  00012c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c84  08002c84  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c84  08002c84  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c84  08002c84  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000005c  08002ce8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002ce8  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d77  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cea  00000000  00000000  00029dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002bae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002c598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001726d  00000000  00000000  0002cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ceeb  00000000  00000000  00044185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008259d  00000000  00000000  00051070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d360d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002950  00000000  00000000  000d3660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c48 	.word	0x08002c48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002c48 	.word	0x08002c48

0800014c <isButtonPressed>:
int TimeOutForKeyPress = 500;

int button_flag[N0_OF_BUTTONS] = {0};
int button_long_pressed[N0_OF_BUTTONS] = {0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000078 	.word	0x20000078

08000180 <getKeyInput>:
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	//button1_flag = 1;
}

void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e012      	b.n	80001b2 <getKeyInput+0x32>
		KeyReg2[i] = KeyReg1[i];
 800018c:	4a45      	ldr	r2, [pc, #276]	; (80002a4 <getKeyInput+0x124>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4944      	ldr	r1, [pc, #272]	; (80002a8 <getKeyInput+0x128>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 800019c:	4a43      	ldr	r2, [pc, #268]	; (80002ac <getKeyInput+0x12c>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	493f      	ldr	r1, [pc, #252]	; (80002a4 <getKeyInput+0x124>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3301      	adds	r3, #1
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2b02      	cmp	r3, #2
 80001b6:	dde9      	ble.n	800018c <getKeyInput+0xc>
	}
  // Add your key
	KeyReg0[0] = HAL_GPIO_ReadPin(B0_GPIO_Port, B0_Pin);
 80001b8:	2180      	movs	r1, #128	; 0x80
 80001ba:	483d      	ldr	r0, [pc, #244]	; (80002b0 <getKeyInput+0x130>)
 80001bc:	f001 fd18 	bl	8001bf0 <HAL_GPIO_ReadPin>
 80001c0:	4603      	mov	r3, r0
 80001c2:	461a      	mov	r2, r3
 80001c4:	4b39      	ldr	r3, [pc, #228]	; (80002ac <getKeyInput+0x12c>)
 80001c6:	601a      	str	r2, [r3, #0]
	KeyReg0[1] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80001c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001cc:	4838      	ldr	r0, [pc, #224]	; (80002b0 <getKeyInput+0x130>)
 80001ce:	f001 fd0f 	bl	8001bf0 <HAL_GPIO_ReadPin>
 80001d2:	4603      	mov	r3, r0
 80001d4:	461a      	mov	r2, r3
 80001d6:	4b35      	ldr	r3, [pc, #212]	; (80002ac <getKeyInput+0x12c>)
 80001d8:	605a      	str	r2, [r3, #4]
	KeyReg0[2] = HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin);
 80001da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001de:	4834      	ldr	r0, [pc, #208]	; (80002b0 <getKeyInput+0x130>)
 80001e0:	f001 fd06 	bl	8001bf0 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b30      	ldr	r3, [pc, #192]	; (80002ac <getKeyInput+0x12c>)
 80001ea:	609a      	str	r2, [r3, #8]

	for(int i = 0; i < N0_OF_BUTTONS; i++){
 80001ec:	2300      	movs	r3, #0
 80001ee:	603b      	str	r3, [r7, #0]
 80001f0:	e050      	b.n	8000294 <getKeyInput+0x114>
		if((KeyReg1[i] == KeyReg0[i]) && (KeyReg2[i] == KeyReg1[i])){
 80001f2:	4a2c      	ldr	r2, [pc, #176]	; (80002a4 <getKeyInput+0x124>)
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fa:	492c      	ldr	r1, [pc, #176]	; (80002ac <getKeyInput+0x12c>)
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000202:	429a      	cmp	r2, r3
 8000204:	d143      	bne.n	800028e <getKeyInput+0x10e>
 8000206:	4a28      	ldr	r2, [pc, #160]	; (80002a8 <getKeyInput+0x128>)
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020e:	4925      	ldr	r1, [pc, #148]	; (80002a4 <getKeyInput+0x124>)
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000216:	429a      	cmp	r2, r3
 8000218:	d139      	bne.n	800028e <getKeyInput+0x10e>
			if(KeyReg2[i] != KeyReg3[i]){
 800021a:	4a23      	ldr	r2, [pc, #140]	; (80002a8 <getKeyInput+0x128>)
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000222:	4924      	ldr	r1, [pc, #144]	; (80002b4 <getKeyInput+0x134>)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022a:	429a      	cmp	r2, r3
 800022c:	d017      	beq.n	800025e <getKeyInput+0xde>
				KeyReg3[i] = KeyReg2[i];
 800022e:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <getKeyInput+0x128>)
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000236:	491f      	ldr	r1, [pc, #124]	; (80002b4 <getKeyInput+0x134>)
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if(KeyReg3[i] == PRESSED_STATE){
 800023e:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <getKeyInput+0x134>)
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d121      	bne.n	800028e <getKeyInput+0x10e>
					TimeOutForKeyPress = 500;
 800024a:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <getKeyInput+0x138>)
 800024c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000250:	601a      	str	r2, [r3, #0]
					button_flag[i] = 1;
 8000252:	4a1a      	ldr	r2, [pc, #104]	; (80002bc <getKeyInput+0x13c>)
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	2101      	movs	r1, #1
 8000258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800025c:	e017      	b.n	800028e <getKeyInput+0x10e>
				}
			}
			else{
				TimeOutForKeyPress--;
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <getKeyInput+0x138>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	3b01      	subs	r3, #1
 8000264:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <getKeyInput+0x138>)
 8000266:	6013      	str	r3, [r2, #0]
				if(TimeOutForKeyPress == 0){
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <getKeyInput+0x138>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d10e      	bne.n	800028e <getKeyInput+0x10e>
					TimeOutForKeyPress = 500;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <getKeyInput+0x138>)
 8000272:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000276:	601a      	str	r2, [r3, #0]

					if(KeyReg3[i] == PRESSED_STATE){
 8000278:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <getKeyInput+0x134>)
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d104      	bne.n	800028e <getKeyInput+0x10e>
						button_flag[i] = 1;
 8000284:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <getKeyInput+0x13c>)
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	2101      	movs	r1, #1
 800028a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	603b      	str	r3, [r7, #0]
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	2b02      	cmp	r3, #2
 8000298:	ddab      	ble.n	80001f2 <getKeyInput+0x72>
					}
				}
			}
		}
	}
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000000c 	.word	0x2000000c
 80002a8:	20000018 	.word	0x20000018
 80002ac:	20000000 	.word	0x20000000
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	20000024 	.word	0x20000024
 80002b8:	20000030 	.word	0x20000030
 80002bc:	20000078 	.word	0x20000078

080002c0 <fsm_automatic_run>:
int countdown_timer1 = 0;
int countdown_timer2 = 0;
int index_led = 0;
const int MAX_LED = 4;

void fsm_automatic_run(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	switch(status){
 80002c4:	4b87      	ldr	r3, [pc, #540]	; (80004e4 <fsm_automatic_run+0x224>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	f200 8215 	bhi.w	80006fa <fsm_automatic_run+0x43a>
 80002d0:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_automatic_run+0x18>)
 80002d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d6:	bf00      	nop
 80002d8:	080002ed 	.word	0x080002ed
 80002dc:	08000325 	.word	0x08000325
 80002e0:	08000405 	.word	0x08000405
 80002e4:	0800050d 	.word	0x0800050d
 80002e8:	080005ed 	.word	0x080005ed
		case INIT:
			status = AUTO_RED_GREEN;
 80002ec:	4b7d      	ldr	r3, [pc, #500]	; (80004e4 <fsm_automatic_run+0x224>)
 80002ee:	2202      	movs	r2, #2
 80002f0:	601a      	str	r2, [r3, #0]
			countdown_timer1 = red_time;
 80002f2:	4b7d      	ldr	r3, [pc, #500]	; (80004e8 <fsm_automatic_run+0x228>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a7d      	ldr	r2, [pc, #500]	; (80004ec <fsm_automatic_run+0x22c>)
 80002f8:	6013      	str	r3, [r2, #0]
			countdown_timer2 = green_time;
 80002fa:	4b7d      	ldr	r3, [pc, #500]	; (80004f0 <fsm_automatic_run+0x230>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a7d      	ldr	r2, [pc, #500]	; (80004f4 <fsm_automatic_run+0x234>)
 8000300:	6013      	str	r3, [r2, #0]
			setTimer1(100);					//chuyen trang thai
 8000302:	2064      	movs	r0, #100	; 0x64
 8000304:	f000 ff96 	bl	8001234 <setTimer1>
			setTimer2(1);							//quet led
 8000308:	2001      	movs	r0, #1
 800030a:	f000 ffa7 	bl	800125c <setTimer2>
			clearTrafficLight();
 800030e:	f001 f909 	bl	8001524 <clearTrafficLight>
			updateClockBuffer(countdown_timer1, countdown_timer2);
 8000312:	4b76      	ldr	r3, [pc, #472]	; (80004ec <fsm_automatic_run+0x22c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a77      	ldr	r2, [pc, #476]	; (80004f4 <fsm_automatic_run+0x234>)
 8000318:	6812      	ldr	r2, [r2, #0]
 800031a:	4611      	mov	r1, r2
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fc2b 	bl	8000b78 <updateClockBuffer>
			break;
 8000322:	e1f3      	b.n	800070c <fsm_automatic_run+0x44c>

		case AUTO_RED_GREEN:
			ledRedGreen();
 8000324:	f001 f8b6 	bl	8001494 <ledRedGreen>
			if(timer2_flag == 1){
 8000328:	4b73      	ldr	r3, [pc, #460]	; (80004f8 <fsm_automatic_run+0x238>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b01      	cmp	r3, #1
 800032e:	d112      	bne.n	8000356 <fsm_automatic_run+0x96>
				setTimer2(25);
 8000330:	2019      	movs	r0, #25
 8000332:	f000 ff93 	bl	800125c <setTimer2>
				update7SEG(index_led);
 8000336:	4b71      	ldr	r3, [pc, #452]	; (80004fc <fsm_automatic_run+0x23c>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fdd0 	bl	8000ee0 <update7SEG>
				index_led = (index_led + 1) % MAX_LED;
 8000340:	4b6e      	ldr	r3, [pc, #440]	; (80004fc <fsm_automatic_run+0x23c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3301      	adds	r3, #1
 8000346:	2204      	movs	r2, #4
 8000348:	fb93 f1f2 	sdiv	r1, r3, r2
 800034c:	fb02 f201 	mul.w	r2, r2, r1
 8000350:	1a9b      	subs	r3, r3, r2
 8000352:	4a6a      	ldr	r2, [pc, #424]	; (80004fc <fsm_automatic_run+0x23c>)
 8000354:	6013      	str	r3, [r2, #0]
			}
			if (timer1_flag == 1) {
 8000356:	4b6a      	ldr	r3, [pc, #424]	; (8000500 <fsm_automatic_run+0x240>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d134      	bne.n	80003c8 <fsm_automatic_run+0x108>
				countdown_timer1--;
 800035e:	4b63      	ldr	r3, [pc, #396]	; (80004ec <fsm_automatic_run+0x22c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	3b01      	subs	r3, #1
 8000364:	4a61      	ldr	r2, [pc, #388]	; (80004ec <fsm_automatic_run+0x22c>)
 8000366:	6013      	str	r3, [r2, #0]
				countdown_timer2--;
 8000368:	4b62      	ldr	r3, [pc, #392]	; (80004f4 <fsm_automatic_run+0x234>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	3b01      	subs	r3, #1
 800036e:	4a61      	ldr	r2, [pc, #388]	; (80004f4 <fsm_automatic_run+0x234>)
 8000370:	6013      	str	r3, [r2, #0]
				updateClockBuffer(countdown_timer1, countdown_timer2);
 8000372:	4b5e      	ldr	r3, [pc, #376]	; (80004ec <fsm_automatic_run+0x22c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a5f      	ldr	r2, [pc, #380]	; (80004f4 <fsm_automatic_run+0x234>)
 8000378:	6812      	ldr	r2, [r2, #0]
 800037a:	4611      	mov	r1, r2
 800037c:	4618      	mov	r0, r3
 800037e:	f000 fbfb 	bl	8000b78 <updateClockBuffer>
				setTimer1(100);
 8000382:	2064      	movs	r0, #100	; 0x64
 8000384:	f000 ff56 	bl	8001234 <setTimer1>
				if(countdown_timer1 == 0){
 8000388:	4b58      	ldr	r3, [pc, #352]	; (80004ec <fsm_automatic_run+0x22c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d103      	bne.n	8000398 <fsm_automatic_run+0xd8>
					countdown_timer1 = red_time;
 8000390:	4b55      	ldr	r3, [pc, #340]	; (80004e8 <fsm_automatic_run+0x228>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a55      	ldr	r2, [pc, #340]	; (80004ec <fsm_automatic_run+0x22c>)
 8000396:	6013      	str	r3, [r2, #0]
				}
				if(countdown_timer2 == 0){
 8000398:	4b56      	ldr	r3, [pc, #344]	; (80004f4 <fsm_automatic_run+0x234>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d113      	bne.n	80003c8 <fsm_automatic_run+0x108>
					countdown_timer2 = yellow_time;
 80003a0:	4b58      	ldr	r3, [pc, #352]	; (8000504 <fsm_automatic_run+0x244>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a53      	ldr	r2, [pc, #332]	; (80004f4 <fsm_automatic_run+0x234>)
 80003a6:	6013      	str	r3, [r2, #0]
					status = AUTO_RED_YELLOW;
 80003a8:	4b4e      	ldr	r3, [pc, #312]	; (80004e4 <fsm_automatic_run+0x224>)
 80003aa:	2203      	movs	r2, #3
 80003ac:	601a      	str	r2, [r3, #0]
					clearTrafficLight();
 80003ae:	f001 f8b9 	bl	8001524 <clearTrafficLight>
					updateClockBuffer(countdown_timer1, countdown_timer2);
 80003b2:	4b4e      	ldr	r3, [pc, #312]	; (80004ec <fsm_automatic_run+0x22c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a4f      	ldr	r2, [pc, #316]	; (80004f4 <fsm_automatic_run+0x234>)
 80003b8:	6812      	ldr	r2, [r2, #0]
 80003ba:	4611      	mov	r1, r2
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fbdb 	bl	8000b78 <updateClockBuffer>
					setTimer1(100);
 80003c2:	2064      	movs	r0, #100	; 0x64
 80003c4:	f000 ff36 	bl	8001234 <setTimer1>
				}
			}

			if (isButtonPressed(1)) {
 80003c8:	2001      	movs	r0, #1
 80003ca:	f7ff febf 	bl	800014c <isButtonPressed>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d004      	beq.n	80003de <fsm_automatic_run+0x11e>
				status = MAN_RED_GREEN;
 80003d4:	4b43      	ldr	r3, [pc, #268]	; (80004e4 <fsm_automatic_run+0x224>)
 80003d6:	2206      	movs	r2, #6
 80003d8:	601a      	str	r2, [r3, #0]
				clearTrafficLight();
 80003da:	f001 f8a3 	bl	8001524 <clearTrafficLight>
			}
			 if (isButtonPressed(0)) {
 80003de:	2000      	movs	r0, #0
 80003e0:	f7ff feb4 	bl	800014c <isButtonPressed>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	f000 8189 	beq.w	80006fe <fsm_automatic_run+0x43e>
				status = MODE_2;
 80003ec:	4b3d      	ldr	r3, [pc, #244]	; (80004e4 <fsm_automatic_run+0x224>)
 80003ee:	220a      	movs	r2, #10
 80003f0:	601a      	str	r2, [r3, #0]
				setTimer3(1);
 80003f2:	2001      	movs	r0, #1
 80003f4:	f000 ff46 	bl	8001284 <setTimer3>
				temp_time = 1;
 80003f8:	4b43      	ldr	r3, [pc, #268]	; (8000508 <fsm_automatic_run+0x248>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	601a      	str	r2, [r3, #0]
				clearTrafficLight();
 80003fe:	f001 f891 	bl	8001524 <clearTrafficLight>
			 }
			break;
 8000402:	e17c      	b.n	80006fe <fsm_automatic_run+0x43e>
		case AUTO_RED_YELLOW:
			ledRedYellow();
 8000404:	f001 f858 	bl	80014b8 <ledRedYellow>
			if(timer2_flag == 1){
 8000408:	4b3b      	ldr	r3, [pc, #236]	; (80004f8 <fsm_automatic_run+0x238>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d112      	bne.n	8000436 <fsm_automatic_run+0x176>
				setTimer2(25);
 8000410:	2019      	movs	r0, #25
 8000412:	f000 ff23 	bl	800125c <setTimer2>
				update7SEG(index_led);
 8000416:	4b39      	ldr	r3, [pc, #228]	; (80004fc <fsm_automatic_run+0x23c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4618      	mov	r0, r3
 800041c:	f000 fd60 	bl	8000ee0 <update7SEG>
				index_led = (index_led + 1) % MAX_LED;
 8000420:	4b36      	ldr	r3, [pc, #216]	; (80004fc <fsm_automatic_run+0x23c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	3301      	adds	r3, #1
 8000426:	2204      	movs	r2, #4
 8000428:	fb93 f1f2 	sdiv	r1, r3, r2
 800042c:	fb02 f201 	mul.w	r2, r2, r1
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	4a32      	ldr	r2, [pc, #200]	; (80004fc <fsm_automatic_run+0x23c>)
 8000434:	6013      	str	r3, [r2, #0]
			}
			if (timer1_flag == 1) {
 8000436:	4b32      	ldr	r3, [pc, #200]	; (8000500 <fsm_automatic_run+0x240>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d134      	bne.n	80004a8 <fsm_automatic_run+0x1e8>
				setTimer1(100);
 800043e:	2064      	movs	r0, #100	; 0x64
 8000440:	f000 fef8 	bl	8001234 <setTimer1>
				countdown_timer1--;
 8000444:	4b29      	ldr	r3, [pc, #164]	; (80004ec <fsm_automatic_run+0x22c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	3b01      	subs	r3, #1
 800044a:	4a28      	ldr	r2, [pc, #160]	; (80004ec <fsm_automatic_run+0x22c>)
 800044c:	6013      	str	r3, [r2, #0]
				countdown_timer2--;
 800044e:	4b29      	ldr	r3, [pc, #164]	; (80004f4 <fsm_automatic_run+0x234>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	3b01      	subs	r3, #1
 8000454:	4a27      	ldr	r2, [pc, #156]	; (80004f4 <fsm_automatic_run+0x234>)
 8000456:	6013      	str	r3, [r2, #0]
				updateClockBuffer(countdown_timer1, countdown_timer2);
 8000458:	4b24      	ldr	r3, [pc, #144]	; (80004ec <fsm_automatic_run+0x22c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a25      	ldr	r2, [pc, #148]	; (80004f4 <fsm_automatic_run+0x234>)
 800045e:	6812      	ldr	r2, [r2, #0]
 8000460:	4611      	mov	r1, r2
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fb88 	bl	8000b78 <updateClockBuffer>
				if(countdown_timer1 == 0){
 8000468:	4b20      	ldr	r3, [pc, #128]	; (80004ec <fsm_automatic_run+0x22c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d103      	bne.n	8000478 <fsm_automatic_run+0x1b8>
					countdown_timer1 = red_time;
 8000470:	4b1d      	ldr	r3, [pc, #116]	; (80004e8 <fsm_automatic_run+0x228>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <fsm_automatic_run+0x22c>)
 8000476:	6013      	str	r3, [r2, #0]
				}
				if(countdown_timer2 == 0){
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <fsm_automatic_run+0x234>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d113      	bne.n	80004a8 <fsm_automatic_run+0x1e8>
					countdown_timer2 = green_time;
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <fsm_automatic_run+0x230>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <fsm_automatic_run+0x234>)
 8000486:	6013      	str	r3, [r2, #0]
					status = AUTO_GREEN_RED;
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <fsm_automatic_run+0x224>)
 800048a:	2204      	movs	r2, #4
 800048c:	601a      	str	r2, [r3, #0]
					clearTrafficLight();
 800048e:	f001 f849 	bl	8001524 <clearTrafficLight>
					setTimer1(100);
 8000492:	2064      	movs	r0, #100	; 0x64
 8000494:	f000 fece 	bl	8001234 <setTimer1>
					updateClockBuffer(countdown_timer2, countdown_timer1);
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <fsm_automatic_run+0x234>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a13      	ldr	r2, [pc, #76]	; (80004ec <fsm_automatic_run+0x22c>)
 800049e:	6812      	ldr	r2, [r2, #0]
 80004a0:	4611      	mov	r1, r2
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 fb68 	bl	8000b78 <updateClockBuffer>
				}
			}

			if (isButtonPressed(1) == 1) {
 80004a8:	2001      	movs	r0, #1
 80004aa:	f7ff fe4f 	bl	800014c <isButtonPressed>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d104      	bne.n	80004be <fsm_automatic_run+0x1fe>
				status = MAN_RED_GREEN;
 80004b4:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <fsm_automatic_run+0x224>)
 80004b6:	2206      	movs	r2, #6
 80004b8:	601a      	str	r2, [r3, #0]
//				setTimer1(countdown_timer1 * 1000);
				clearTrafficLight();
 80004ba:	f001 f833 	bl	8001524 <clearTrafficLight>
			}
			 if (isButtonPressed(0)) {
 80004be:	2000      	movs	r0, #0
 80004c0:	f7ff fe44 	bl	800014c <isButtonPressed>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	f000 811b 	beq.w	8000702 <fsm_automatic_run+0x442>
				status = MODE_2;
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <fsm_automatic_run+0x224>)
 80004ce:	220a      	movs	r2, #10
 80004d0:	601a      	str	r2, [r3, #0]
				setTimer3(1);
 80004d2:	2001      	movs	r0, #1
 80004d4:	f000 fed6 	bl	8001284 <setTimer3>
				temp_time = 1;
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <fsm_automatic_run+0x248>)
 80004da:	2201      	movs	r2, #1
 80004dc:	601a      	str	r2, [r3, #0]
				clearTrafficLight();
 80004de:	f001 f821 	bl	8001524 <clearTrafficLight>
			 }
			break;
 80004e2:	e10e      	b.n	8000702 <fsm_automatic_run+0x442>
 80004e4:	2000003c 	.word	0x2000003c
 80004e8:	20000040 	.word	0x20000040
 80004ec:	20000084 	.word	0x20000084
 80004f0:	20000044 	.word	0x20000044
 80004f4:	20000088 	.word	0x20000088
 80004f8:	200000a0 	.word	0x200000a0
 80004fc:	2000008c 	.word	0x2000008c
 8000500:	20000098 	.word	0x20000098
 8000504:	20000048 	.word	0x20000048
 8000508:	2000004c 	.word	0x2000004c
		case AUTO_GREEN_RED:
			ledGreenRed();
 800050c:	f000 ffe6 	bl	80014dc <ledGreenRed>
			if(timer2_flag == 1){
 8000510:	4b7f      	ldr	r3, [pc, #508]	; (8000710 <fsm_automatic_run+0x450>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d112      	bne.n	800053e <fsm_automatic_run+0x27e>
				setTimer2(25);
 8000518:	2019      	movs	r0, #25
 800051a:	f000 fe9f 	bl	800125c <setTimer2>
				update7SEG(index_led);
 800051e:	4b7d      	ldr	r3, [pc, #500]	; (8000714 <fsm_automatic_run+0x454>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fcdc 	bl	8000ee0 <update7SEG>
				index_led = (index_led + 1) % MAX_LED;
 8000528:	4b7a      	ldr	r3, [pc, #488]	; (8000714 <fsm_automatic_run+0x454>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	2204      	movs	r2, #4
 8000530:	fb93 f1f2 	sdiv	r1, r3, r2
 8000534:	fb02 f201 	mul.w	r2, r2, r1
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	4a76      	ldr	r2, [pc, #472]	; (8000714 <fsm_automatic_run+0x454>)
 800053c:	6013      	str	r3, [r2, #0]
			}
			if (timer1_flag == 1) {
 800053e:	4b76      	ldr	r3, [pc, #472]	; (8000718 <fsm_automatic_run+0x458>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d134      	bne.n	80005b0 <fsm_automatic_run+0x2f0>
				setTimer1(100);
 8000546:	2064      	movs	r0, #100	; 0x64
 8000548:	f000 fe74 	bl	8001234 <setTimer1>
				countdown_timer1--;
 800054c:	4b73      	ldr	r3, [pc, #460]	; (800071c <fsm_automatic_run+0x45c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3b01      	subs	r3, #1
 8000552:	4a72      	ldr	r2, [pc, #456]	; (800071c <fsm_automatic_run+0x45c>)
 8000554:	6013      	str	r3, [r2, #0]
				countdown_timer2--;
 8000556:	4b72      	ldr	r3, [pc, #456]	; (8000720 <fsm_automatic_run+0x460>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3b01      	subs	r3, #1
 800055c:	4a70      	ldr	r2, [pc, #448]	; (8000720 <fsm_automatic_run+0x460>)
 800055e:	6013      	str	r3, [r2, #0]
				updateClockBuffer(countdown_timer2, countdown_timer1);
 8000560:	4b6f      	ldr	r3, [pc, #444]	; (8000720 <fsm_automatic_run+0x460>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a6d      	ldr	r2, [pc, #436]	; (800071c <fsm_automatic_run+0x45c>)
 8000566:	6812      	ldr	r2, [r2, #0]
 8000568:	4611      	mov	r1, r2
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fb04 	bl	8000b78 <updateClockBuffer>
				if(countdown_timer1 == 0){
 8000570:	4b6a      	ldr	r3, [pc, #424]	; (800071c <fsm_automatic_run+0x45c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d103      	bne.n	8000580 <fsm_automatic_run+0x2c0>
					countdown_timer1 = red_time;
 8000578:	4b6a      	ldr	r3, [pc, #424]	; (8000724 <fsm_automatic_run+0x464>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a67      	ldr	r2, [pc, #412]	; (800071c <fsm_automatic_run+0x45c>)
 800057e:	6013      	str	r3, [r2, #0]
				}
				if(countdown_timer2 == 0){
 8000580:	4b67      	ldr	r3, [pc, #412]	; (8000720 <fsm_automatic_run+0x460>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d113      	bne.n	80005b0 <fsm_automatic_run+0x2f0>
					countdown_timer2 = yellow_time;
 8000588:	4b67      	ldr	r3, [pc, #412]	; (8000728 <fsm_automatic_run+0x468>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a64      	ldr	r2, [pc, #400]	; (8000720 <fsm_automatic_run+0x460>)
 800058e:	6013      	str	r3, [r2, #0]
					status = AUTO_YELLOW_RED;
 8000590:	4b66      	ldr	r3, [pc, #408]	; (800072c <fsm_automatic_run+0x46c>)
 8000592:	2205      	movs	r2, #5
 8000594:	601a      	str	r2, [r3, #0]
					updateClockBuffer(countdown_timer2, countdown_timer1);
 8000596:	4b62      	ldr	r3, [pc, #392]	; (8000720 <fsm_automatic_run+0x460>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a60      	ldr	r2, [pc, #384]	; (800071c <fsm_automatic_run+0x45c>)
 800059c:	6812      	ldr	r2, [r2, #0]
 800059e:	4611      	mov	r1, r2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fae9 	bl	8000b78 <updateClockBuffer>
					clearTrafficLight();
 80005a6:	f000 ffbd 	bl	8001524 <clearTrafficLight>
					setTimer1(100);
 80005aa:	2064      	movs	r0, #100	; 0x64
 80005ac:	f000 fe42 	bl	8001234 <setTimer1>
				}
			}

			if (isButtonPressed(1) == 1) {
 80005b0:	2001      	movs	r0, #1
 80005b2:	f7ff fdcb 	bl	800014c <isButtonPressed>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d104      	bne.n	80005c6 <fsm_automatic_run+0x306>
				status = MAN_RED_GREEN;
 80005bc:	4b5b      	ldr	r3, [pc, #364]	; (800072c <fsm_automatic_run+0x46c>)
 80005be:	2206      	movs	r2, #6
 80005c0:	601a      	str	r2, [r3, #0]
//				setTimer1(countdown_timer1 * 1000);
				clearTrafficLight();
 80005c2:	f000 ffaf 	bl	8001524 <clearTrafficLight>
			}
			 if (isButtonPressed(0)) {
 80005c6:	2000      	movs	r0, #0
 80005c8:	f7ff fdc0 	bl	800014c <isButtonPressed>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	f000 8099 	beq.w	8000706 <fsm_automatic_run+0x446>
				status = MODE_2;
 80005d4:	4b55      	ldr	r3, [pc, #340]	; (800072c <fsm_automatic_run+0x46c>)
 80005d6:	220a      	movs	r2, #10
 80005d8:	601a      	str	r2, [r3, #0]
				setTimer3(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fe52 	bl	8001284 <setTimer3>
				temp_time = 1;
 80005e0:	4b53      	ldr	r3, [pc, #332]	; (8000730 <fsm_automatic_run+0x470>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
				clearTrafficLight();
 80005e6:	f000 ff9d 	bl	8001524 <clearTrafficLight>
			 }
			break;
 80005ea:	e08c      	b.n	8000706 <fsm_automatic_run+0x446>
		case AUTO_YELLOW_RED:
			ledYellowRed();
 80005ec:	f000 ff88 	bl	8001500 <ledYellowRed>
			if(timer2_flag == 1){
 80005f0:	4b47      	ldr	r3, [pc, #284]	; (8000710 <fsm_automatic_run+0x450>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d112      	bne.n	800061e <fsm_automatic_run+0x35e>
				setTimer2(25);
 80005f8:	2019      	movs	r0, #25
 80005fa:	f000 fe2f 	bl	800125c <setTimer2>
				update7SEG(index_led);
 80005fe:	4b45      	ldr	r3, [pc, #276]	; (8000714 <fsm_automatic_run+0x454>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fc6c 	bl	8000ee0 <update7SEG>
				index_led = (index_led + 1) % MAX_LED;
 8000608:	4b42      	ldr	r3, [pc, #264]	; (8000714 <fsm_automatic_run+0x454>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	2204      	movs	r2, #4
 8000610:	fb93 f1f2 	sdiv	r1, r3, r2
 8000614:	fb02 f201 	mul.w	r2, r2, r1
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	4a3e      	ldr	r2, [pc, #248]	; (8000714 <fsm_automatic_run+0x454>)
 800061c:	6013      	str	r3, [r2, #0]
			}
			if (timer1_flag == 1) {
 800061e:	4b3e      	ldr	r3, [pc, #248]	; (8000718 <fsm_automatic_run+0x458>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d14c      	bne.n	80006c0 <fsm_automatic_run+0x400>
				setTimer1(100);
 8000626:	2064      	movs	r0, #100	; 0x64
 8000628:	f000 fe04 	bl	8001234 <setTimer1>
				countdown_timer1--;
 800062c:	4b3b      	ldr	r3, [pc, #236]	; (800071c <fsm_automatic_run+0x45c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3b01      	subs	r3, #1
 8000632:	4a3a      	ldr	r2, [pc, #232]	; (800071c <fsm_automatic_run+0x45c>)
 8000634:	6013      	str	r3, [r2, #0]
				countdown_timer2--;
 8000636:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <fsm_automatic_run+0x460>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3b01      	subs	r3, #1
 800063c:	4a38      	ldr	r2, [pc, #224]	; (8000720 <fsm_automatic_run+0x460>)
 800063e:	6013      	str	r3, [r2, #0]
				updateClockBuffer(countdown_timer2, countdown_timer1);
 8000640:	4b37      	ldr	r3, [pc, #220]	; (8000720 <fsm_automatic_run+0x460>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a35      	ldr	r2, [pc, #212]	; (800071c <fsm_automatic_run+0x45c>)
 8000646:	6812      	ldr	r2, [r2, #0]
 8000648:	4611      	mov	r1, r2
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fa94 	bl	8000b78 <updateClockBuffer>
				if(countdown_timer2 <= 0 || countdown_timer1 <= 0){
 8000650:	4b33      	ldr	r3, [pc, #204]	; (8000720 <fsm_automatic_run+0x460>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	dd03      	ble.n	8000660 <fsm_automatic_run+0x3a0>
 8000658:	4b30      	ldr	r3, [pc, #192]	; (800071c <fsm_automatic_run+0x45c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	dc0f      	bgt.n	8000680 <fsm_automatic_run+0x3c0>
					countdown_timer1 = red_time;
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <fsm_automatic_run+0x464>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a2d      	ldr	r2, [pc, #180]	; (800071c <fsm_automatic_run+0x45c>)
 8000666:	6013      	str	r3, [r2, #0]
					countdown_timer2 = green_time;
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <fsm_automatic_run+0x474>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a2c      	ldr	r2, [pc, #176]	; (8000720 <fsm_automatic_run+0x460>)
 800066e:	6013      	str	r3, [r2, #0]
					status = AUTO_RED_GREEN;
 8000670:	4b2e      	ldr	r3, [pc, #184]	; (800072c <fsm_automatic_run+0x46c>)
 8000672:	2202      	movs	r2, #2
 8000674:	601a      	str	r2, [r3, #0]
					clearTrafficLight();
 8000676:	f000 ff55 	bl	8001524 <clearTrafficLight>
					setTimer1(100);
 800067a:	2064      	movs	r0, #100	; 0x64
 800067c:	f000 fdda 	bl	8001234 <setTimer1>
				}
				if( countdown_timer1 == 0){
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <fsm_automatic_run+0x45c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d103      	bne.n	8000690 <fsm_automatic_run+0x3d0>
					countdown_timer1 = red_time;
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <fsm_automatic_run+0x464>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a23      	ldr	r2, [pc, #140]	; (800071c <fsm_automatic_run+0x45c>)
 800068e:	6013      	str	r3, [r2, #0]
				}
				if(countdown_timer2 == 0){
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <fsm_automatic_run+0x460>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d113      	bne.n	80006c0 <fsm_automatic_run+0x400>
					countdown_timer2 = green_time;
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <fsm_automatic_run+0x474>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a20      	ldr	r2, [pc, #128]	; (8000720 <fsm_automatic_run+0x460>)
 800069e:	6013      	str	r3, [r2, #0]
					status = AUTO_RED_GREEN;
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <fsm_automatic_run+0x46c>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	601a      	str	r2, [r3, #0]
					clearTrafficLight();
 80006a6:	f000 ff3d 	bl	8001524 <clearTrafficLight>
					updateClockBuffer(countdown_timer1, countdown_timer2);
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <fsm_automatic_run+0x45c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <fsm_automatic_run+0x460>)
 80006b0:	6812      	ldr	r2, [r2, #0]
 80006b2:	4611      	mov	r1, r2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fa5f 	bl	8000b78 <updateClockBuffer>
					setTimer1(100);
 80006ba:	2064      	movs	r0, #100	; 0x64
 80006bc:	f000 fdba 	bl	8001234 <setTimer1>
				}
			}


			if (isButtonPressed(1) == 1) {
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff fd43 	bl	800014c <isButtonPressed>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d104      	bne.n	80006d6 <fsm_automatic_run+0x416>
				status = MAN_RED_GREEN;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <fsm_automatic_run+0x46c>)
 80006ce:	2206      	movs	r2, #6
 80006d0:	601a      	str	r2, [r3, #0]
//				setTimer1( countdown_timer1 * 1000);
				clearTrafficLight();
 80006d2:	f000 ff27 	bl	8001524 <clearTrafficLight>
			}
			 if (isButtonPressed(0)) {
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff fd38 	bl	800014c <isButtonPressed>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d013      	beq.n	800070a <fsm_automatic_run+0x44a>
				status = MODE_2;
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <fsm_automatic_run+0x46c>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	601a      	str	r2, [r3, #0]
				setTimer3(1);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f000 fdcb 	bl	8001284 <setTimer3>
				temp_time = 1;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <fsm_automatic_run+0x470>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
				clearTrafficLight();
 80006f4:	f000 ff16 	bl	8001524 <clearTrafficLight>
			 }
			break;
 80006f8:	e007      	b.n	800070a <fsm_automatic_run+0x44a>
		default:
			break;
 80006fa:	bf00      	nop
 80006fc:	e006      	b.n	800070c <fsm_automatic_run+0x44c>
			break;
 80006fe:	bf00      	nop
 8000700:	e004      	b.n	800070c <fsm_automatic_run+0x44c>
			break;
 8000702:	bf00      	nop
 8000704:	e002      	b.n	800070c <fsm_automatic_run+0x44c>
			break;
 8000706:	bf00      	nop
 8000708:	e000      	b.n	800070c <fsm_automatic_run+0x44c>
			break;
 800070a:	bf00      	nop
	}
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000a0 	.word	0x200000a0
 8000714:	2000008c 	.word	0x2000008c
 8000718:	20000098 	.word	0x20000098
 800071c:	20000084 	.word	0x20000084
 8000720:	20000088 	.word	0x20000088
 8000724:	20000040 	.word	0x20000040
 8000728:	20000048 	.word	0x20000048
 800072c:	2000003c 	.word	0x2000003c
 8000730:	2000004c 	.word	0x2000004c
 8000734:	20000044 	.word	0x20000044

08000738 <fsm_manual_run>:
//int countdown_timer1 = 0;
//int countdown_timer2 = 0;
//int index_led = 0;
//const int MAX_LED = 4;

void fsm_manual_run() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    switch (status) {
 800073c:	4b56      	ldr	r3, [pc, #344]	; (8000898 <fsm_manual_run+0x160>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3b06      	subs	r3, #6
 8000742:	2b03      	cmp	r3, #3
 8000744:	f200 809c 	bhi.w	8000880 <fsm_manual_run+0x148>
 8000748:	a201      	add	r2, pc, #4	; (adr r2, 8000750 <fsm_manual_run+0x18>)
 800074a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074e:	bf00      	nop
 8000750:	08000761 	.word	0x08000761
 8000754:	080007a9 	.word	0x080007a9
 8000758:	080007f1 	.word	0x080007f1
 800075c:	08000839 	.word	0x08000839
        case MAN_RED_GREEN:
            ledRedGreen();
 8000760:	f000 fe98 	bl	8001494 <ledRedGreen>

            if (isButtonPressed(0) == 1) {
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff fcf1 	bl	800014c <isButtonPressed>
 800076a:	4603      	mov	r3, r0
 800076c:	2b01      	cmp	r3, #1
 800076e:	d104      	bne.n	800077a <fsm_manual_run+0x42>
                status = MODE_2;
 8000770:	4b49      	ldr	r3, [pc, #292]	; (8000898 <fsm_manual_run+0x160>)
 8000772:	220a      	movs	r2, #10
 8000774:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 8000776:	f000 fed5 	bl	8001524 <clearTrafficLight>
            }
            if (isButtonPressed(1) == 1) {
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff fce6 	bl	800014c <isButtonPressed>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d104      	bne.n	8000790 <fsm_manual_run+0x58>
                status = MAN_RED_YELLOW;
 8000786:	4b44      	ldr	r3, [pc, #272]	; (8000898 <fsm_manual_run+0x160>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 800078c:	f000 feca 	bl	8001524 <clearTrafficLight>
            }
            if (isButtonPressed(2) == 1) {
 8000790:	2002      	movs	r0, #2
 8000792:	f7ff fcdb 	bl	800014c <isButtonPressed>
 8000796:	4603      	mov	r3, r0
 8000798:	2b01      	cmp	r3, #1
 800079a:	d173      	bne.n	8000884 <fsm_manual_run+0x14c>
                status = AUTO_RED_GREEN;
 800079c:	4b3e      	ldr	r3, [pc, #248]	; (8000898 <fsm_manual_run+0x160>)
 800079e:	2202      	movs	r2, #2
 80007a0:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 80007a2:	f000 febf 	bl	8001524 <clearTrafficLight>
            }

            break;
 80007a6:	e06d      	b.n	8000884 <fsm_manual_run+0x14c>

        case MAN_RED_YELLOW:
            ledRedYellow();
 80007a8:	f000 fe86 	bl	80014b8 <ledRedYellow>

            if (isButtonPressed(0) == 1) {
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff fccd 	bl	800014c <isButtonPressed>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d104      	bne.n	80007c2 <fsm_manual_run+0x8a>
                status = MODE_2;
 80007b8:	4b37      	ldr	r3, [pc, #220]	; (8000898 <fsm_manual_run+0x160>)
 80007ba:	220a      	movs	r2, #10
 80007bc:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 80007be:	f000 feb1 	bl	8001524 <clearTrafficLight>
            }
            if (isButtonPressed(1) == 1) {
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff fcc2 	bl	800014c <isButtonPressed>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d104      	bne.n	80007d8 <fsm_manual_run+0xa0>
                status = MAN_GREEN_RED;
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <fsm_manual_run+0x160>)
 80007d0:	2208      	movs	r2, #8
 80007d2:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 80007d4:	f000 fea6 	bl	8001524 <clearTrafficLight>
            }
            if (isButtonPressed(2) == 1) {
 80007d8:	2002      	movs	r0, #2
 80007da:	f7ff fcb7 	bl	800014c <isButtonPressed>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d151      	bne.n	8000888 <fsm_manual_run+0x150>
                status = AUTO_RED_YELLOW;
 80007e4:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <fsm_manual_run+0x160>)
 80007e6:	2203      	movs	r2, #3
 80007e8:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 80007ea:	f000 fe9b 	bl	8001524 <clearTrafficLight>
            }
            break;
 80007ee:	e04b      	b.n	8000888 <fsm_manual_run+0x150>

        case MAN_GREEN_RED:
            ledGreenRed();
 80007f0:	f000 fe74 	bl	80014dc <ledGreenRed>

            if (isButtonPressed(0) == 1) {
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff fca9 	bl	800014c <isButtonPressed>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d104      	bne.n	800080a <fsm_manual_run+0xd2>
                status = MODE_2;
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <fsm_manual_run+0x160>)
 8000802:	220a      	movs	r2, #10
 8000804:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 8000806:	f000 fe8d 	bl	8001524 <clearTrafficLight>
            }
            if (isButtonPressed(1) == 1) {
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff fc9e 	bl	800014c <isButtonPressed>
 8000810:	4603      	mov	r3, r0
 8000812:	2b01      	cmp	r3, #1
 8000814:	d104      	bne.n	8000820 <fsm_manual_run+0xe8>
                status = MAN_YELLOW_RED;
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <fsm_manual_run+0x160>)
 8000818:	2209      	movs	r2, #9
 800081a:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 800081c:	f000 fe82 	bl	8001524 <clearTrafficLight>
            }
            if (isButtonPressed(2) == 1) {
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff fc93 	bl	800014c <isButtonPressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d12f      	bne.n	800088c <fsm_manual_run+0x154>
                status = AUTO_GREEN_RED;
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <fsm_manual_run+0x160>)
 800082e:	2204      	movs	r2, #4
 8000830:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 8000832:	f000 fe77 	bl	8001524 <clearTrafficLight>
            }
            break;
 8000836:	e029      	b.n	800088c <fsm_manual_run+0x154>

        case MAN_YELLOW_RED:
            ledYellowRed();
 8000838:	f000 fe62 	bl	8001500 <ledYellowRed>

            if (isButtonPressed(0) == 1) {
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fc85 	bl	800014c <isButtonPressed>
 8000842:	4603      	mov	r3, r0
 8000844:	2b01      	cmp	r3, #1
 8000846:	d104      	bne.n	8000852 <fsm_manual_run+0x11a>
                status = MODE_2;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <fsm_manual_run+0x160>)
 800084a:	220a      	movs	r2, #10
 800084c:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 800084e:	f000 fe69 	bl	8001524 <clearTrafficLight>
            }
            if (isButtonPressed(1) == 1) {
 8000852:	2001      	movs	r0, #1
 8000854:	f7ff fc7a 	bl	800014c <isButtonPressed>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	d104      	bne.n	8000868 <fsm_manual_run+0x130>
                status = MAN_RED_GREEN;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <fsm_manual_run+0x160>)
 8000860:	2206      	movs	r2, #6
 8000862:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 8000864:	f000 fe5e 	bl	8001524 <clearTrafficLight>
            }
            if (isButtonPressed(2) == 1) {
 8000868:	2002      	movs	r0, #2
 800086a:	f7ff fc6f 	bl	800014c <isButtonPressed>
 800086e:	4603      	mov	r3, r0
 8000870:	2b01      	cmp	r3, #1
 8000872:	d10d      	bne.n	8000890 <fsm_manual_run+0x158>
                status = AUTO_YELLOW_RED;
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <fsm_manual_run+0x160>)
 8000876:	2205      	movs	r2, #5
 8000878:	601a      	str	r2, [r3, #0]
                clearTrafficLight();
 800087a:	f000 fe53 	bl	8001524 <clearTrafficLight>
            }
            break;
 800087e:	e007      	b.n	8000890 <fsm_manual_run+0x158>

        default:
            break;
 8000880:	bf00      	nop
 8000882:	e006      	b.n	8000892 <fsm_manual_run+0x15a>
            break;
 8000884:	bf00      	nop
 8000886:	e004      	b.n	8000892 <fsm_manual_run+0x15a>
            break;
 8000888:	bf00      	nop
 800088a:	e002      	b.n	8000892 <fsm_manual_run+0x15a>
            break;
 800088c:	bf00      	nop
 800088e:	e000      	b.n	8000892 <fsm_manual_run+0x15a>
            break;
 8000890:	bf00      	nop
    }
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000003c 	.word	0x2000003c

0800089c <fsm_setting>:
int mode3 = 3;
int mode4 = 4;
int num = 0;
const int MAX = 4;

void fsm_setting() {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	switch(status) {
 80008a0:	4ba9      	ldr	r3, [pc, #676]	; (8000b48 <fsm_setting+0x2ac>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b0c      	cmp	r3, #12
 80008a6:	f000 80df 	beq.w	8000a68 <fsm_setting+0x1cc>
 80008aa:	2b0c      	cmp	r3, #12
 80008ac:	f300 8143 	bgt.w	8000b36 <fsm_setting+0x29a>
 80008b0:	2b0a      	cmp	r3, #10
 80008b2:	d002      	beq.n	80008ba <fsm_setting+0x1e>
 80008b4:	2b0b      	cmp	r3, #11
 80008b6:	d06c      	beq.n	8000992 <fsm_setting+0xf6>
	                clearTrafficLight();
	            }
	            break;

	        default:
	            break;
 80008b8:	e13d      	b.n	8000b36 <fsm_setting+0x29a>
			updateClockBuffer(2, temp_time);
 80008ba:	4ba4      	ldr	r3, [pc, #656]	; (8000b4c <fsm_setting+0x2b0>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4619      	mov	r1, r3
 80008c0:	2002      	movs	r0, #2
 80008c2:	f000 f959 	bl	8000b78 <updateClockBuffer>
			if(timer2_flag == 1){
 80008c6:	4ba2      	ldr	r3, [pc, #648]	; (8000b50 <fsm_setting+0x2b4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d113      	bne.n	80008f6 <fsm_setting+0x5a>
				setTimer2(25);
 80008ce:	2019      	movs	r0, #25
 80008d0:	f000 fcc4 	bl	800125c <setTimer2>
				update7SEG(num);
 80008d4:	4b9f      	ldr	r3, [pc, #636]	; (8000b54 <fsm_setting+0x2b8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fb01 	bl	8000ee0 <update7SEG>
				num++;
 80008de:	4b9d      	ldr	r3, [pc, #628]	; (8000b54 <fsm_setting+0x2b8>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	4a9b      	ldr	r2, [pc, #620]	; (8000b54 <fsm_setting+0x2b8>)
 80008e6:	6013      	str	r3, [r2, #0]
				if(num>3){
 80008e8:	4b9a      	ldr	r3, [pc, #616]	; (8000b54 <fsm_setting+0x2b8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	dd02      	ble.n	80008f6 <fsm_setting+0x5a>
					num = 0;
 80008f0:	4b98      	ldr	r3, [pc, #608]	; (8000b54 <fsm_setting+0x2b8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
			if(timer3_flag == 1){
 80008f6:	4b98      	ldr	r3, [pc, #608]	; (8000b58 <fsm_setting+0x2bc>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d104      	bne.n	8000908 <fsm_setting+0x6c>
					toggleRedLED();
 80008fe:	f000 fe37 	bl	8001570 <toggleRedLED>
					setTimer3(50);
 8000902:	2032      	movs	r0, #50	; 0x32
 8000904:	f000 fcbe 	bl	8001284 <setTimer3>
	            if (isButtonPressed(0) == 1) {
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fc1f 	bl	800014c <isButtonPressed>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	d107      	bne.n	8000924 <fsm_setting+0x88>
	                status = MODE_3;
 8000914:	4b8c      	ldr	r3, [pc, #560]	; (8000b48 <fsm_setting+0x2ac>)
 8000916:	220b      	movs	r2, #11
 8000918:	601a      	str	r2, [r3, #0]
	                temp_time = 1;
 800091a:	4b8c      	ldr	r3, [pc, #560]	; (8000b4c <fsm_setting+0x2b0>)
 800091c:	2201      	movs	r2, #1
 800091e:	601a      	str	r2, [r3, #0]
	                clearTrafficLight();
 8000920:	f000 fe00 	bl	8001524 <clearTrafficLight>
	            if (isButtonPressed(1) == 1) {
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fc11 	bl	800014c <isButtonPressed>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	d10b      	bne.n	8000948 <fsm_setting+0xac>
	               temp_time++;
 8000930:	4b86      	ldr	r3, [pc, #536]	; (8000b4c <fsm_setting+0x2b0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a85      	ldr	r2, [pc, #532]	; (8000b4c <fsm_setting+0x2b0>)
 8000938:	6013      	str	r3, [r2, #0]
	                if (temp_time > 99) {
 800093a:	4b84      	ldr	r3, [pc, #528]	; (8000b4c <fsm_setting+0x2b0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b63      	cmp	r3, #99	; 0x63
 8000940:	dd02      	ble.n	8000948 <fsm_setting+0xac>
	                	temp_time = 1;
 8000942:	4b82      	ldr	r3, [pc, #520]	; (8000b4c <fsm_setting+0x2b0>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
	            if (isButtonPressed(2) == 1) {
 8000948:	2002      	movs	r0, #2
 800094a:	f7ff fbff 	bl	800014c <isButtonPressed>
 800094e:	4603      	mov	r3, r0
 8000950:	2b01      	cmp	r3, #1
 8000952:	f040 80f2 	bne.w	8000b3a <fsm_setting+0x29e>
	                red_time = temp_time;
 8000956:	4b7d      	ldr	r3, [pc, #500]	; (8000b4c <fsm_setting+0x2b0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a80      	ldr	r2, [pc, #512]	; (8000b5c <fsm_setting+0x2c0>)
 800095c:	6013      	str	r3, [r2, #0]
	                green_time = (3 * red_time /5);
 800095e:	4b7f      	ldr	r3, [pc, #508]	; (8000b5c <fsm_setting+0x2c0>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4613      	mov	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4413      	add	r3, r2
 8000968:	4a7d      	ldr	r2, [pc, #500]	; (8000b60 <fsm_setting+0x2c4>)
 800096a:	fb82 1203 	smull	r1, r2, r2, r3
 800096e:	1052      	asrs	r2, r2, #1
 8000970:	17db      	asrs	r3, r3, #31
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	4a7b      	ldr	r2, [pc, #492]	; (8000b64 <fsm_setting+0x2c8>)
 8000976:	6013      	str	r3, [r2, #0]
	                yellow_time = red_time - green_time;
 8000978:	4b78      	ldr	r3, [pc, #480]	; (8000b5c <fsm_setting+0x2c0>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b79      	ldr	r3, [pc, #484]	; (8000b64 <fsm_setting+0x2c8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	4a79      	ldr	r2, [pc, #484]	; (8000b68 <fsm_setting+0x2cc>)
 8000984:	6013      	str	r3, [r2, #0]
	                status = INIT;
 8000986:	4b70      	ldr	r3, [pc, #448]	; (8000b48 <fsm_setting+0x2ac>)
 8000988:	2201      	movs	r2, #1
 800098a:	601a      	str	r2, [r3, #0]
	                clearTrafficLight();
 800098c:	f000 fdca 	bl	8001524 <clearTrafficLight>
	            break;
 8000990:	e0d3      	b.n	8000b3a <fsm_setting+0x29e>
	        	updateClockBuffer(mode3, temp_time);
 8000992:	4b76      	ldr	r3, [pc, #472]	; (8000b6c <fsm_setting+0x2d0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a6d      	ldr	r2, [pc, #436]	; (8000b4c <fsm_setting+0x2b0>)
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f8eb 	bl	8000b78 <updateClockBuffer>
	        	if(timer3_flag == 1){
 80009a2:	4b6d      	ldr	r3, [pc, #436]	; (8000b58 <fsm_setting+0x2bc>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d104      	bne.n	80009b4 <fsm_setting+0x118>
	        		toggleYellowLED();
 80009aa:	f000 fdf1 	bl	8001590 <toggleYellowLED>
	        		setTimer3(50);
 80009ae:	2032      	movs	r0, #50	; 0x32
 80009b0:	f000 fc68 	bl	8001284 <setTimer3>
				if(timer2_flag == 1){
 80009b4:	4b66      	ldr	r3, [pc, #408]	; (8000b50 <fsm_setting+0x2b4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d112      	bne.n	80009e2 <fsm_setting+0x146>
					setTimer2(25);
 80009bc:	2019      	movs	r0, #25
 80009be:	f000 fc4d 	bl	800125c <setTimer2>
					update7SEG(num);
 80009c2:	4b64      	ldr	r3, [pc, #400]	; (8000b54 <fsm_setting+0x2b8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fa8a 	bl	8000ee0 <update7SEG>
					num = (num + 1) % MAX;
 80009cc:	4b61      	ldr	r3, [pc, #388]	; (8000b54 <fsm_setting+0x2b8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	2204      	movs	r2, #4
 80009d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80009d8:	fb02 f201 	mul.w	r2, r2, r1
 80009dc:	1a9b      	subs	r3, r3, r2
 80009de:	4a5d      	ldr	r2, [pc, #372]	; (8000b54 <fsm_setting+0x2b8>)
 80009e0:	6013      	str	r3, [r2, #0]
	            if (isButtonPressed(0) == 1) {
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fbb2 	bl	800014c <isButtonPressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d107      	bne.n	80009fe <fsm_setting+0x162>
	                status = MODE_4;
 80009ee:	4b56      	ldr	r3, [pc, #344]	; (8000b48 <fsm_setting+0x2ac>)
 80009f0:	220c      	movs	r2, #12
 80009f2:	601a      	str	r2, [r3, #0]
	                temp_time = 1;
 80009f4:	4b55      	ldr	r3, [pc, #340]	; (8000b4c <fsm_setting+0x2b0>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	601a      	str	r2, [r3, #0]
	                clearTrafficLight();
 80009fa:	f000 fd93 	bl	8001524 <clearTrafficLight>
	            if (isButtonPressed(1) == 1) {
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff fba4 	bl	800014c <isButtonPressed>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d10b      	bne.n	8000a22 <fsm_setting+0x186>
	                temp_time++;
 8000a0a:	4b50      	ldr	r3, [pc, #320]	; (8000b4c <fsm_setting+0x2b0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	4a4e      	ldr	r2, [pc, #312]	; (8000b4c <fsm_setting+0x2b0>)
 8000a12:	6013      	str	r3, [r2, #0]
	                if (temp_time > 99){
 8000a14:	4b4d      	ldr	r3, [pc, #308]	; (8000b4c <fsm_setting+0x2b0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b63      	cmp	r3, #99	; 0x63
 8000a1a:	dd02      	ble.n	8000a22 <fsm_setting+0x186>
	                	temp_time = 1;
 8000a1c:	4b4b      	ldr	r3, [pc, #300]	; (8000b4c <fsm_setting+0x2b0>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
	            if (isButtonPressed(2) == 1) {
 8000a22:	2002      	movs	r0, #2
 8000a24:	f7ff fb92 	bl	800014c <isButtonPressed>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	f040 8087 	bne.w	8000b3e <fsm_setting+0x2a2>
	                yellow_time = temp_time;
 8000a30:	4b46      	ldr	r3, [pc, #280]	; (8000b4c <fsm_setting+0x2b0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a4c      	ldr	r2, [pc, #304]	; (8000b68 <fsm_setting+0x2cc>)
 8000a36:	6013      	str	r3, [r2, #0]
	                green_time = (3 * yellow_time /2);
 8000a38:	4b4b      	ldr	r3, [pc, #300]	; (8000b68 <fsm_setting+0x2cc>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	0fda      	lsrs	r2, r3, #31
 8000a44:	4413      	add	r3, r2
 8000a46:	105b      	asrs	r3, r3, #1
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b46      	ldr	r3, [pc, #280]	; (8000b64 <fsm_setting+0x2c8>)
 8000a4c:	601a      	str	r2, [r3, #0]
	                red_time = green_time + yellow_time;
 8000a4e:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <fsm_setting+0x2c8>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b45      	ldr	r3, [pc, #276]	; (8000b68 <fsm_setting+0x2cc>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a40      	ldr	r2, [pc, #256]	; (8000b5c <fsm_setting+0x2c0>)
 8000a5a:	6013      	str	r3, [r2, #0]
	                status = AUTO_RED_GREEN;
 8000a5c:	4b3a      	ldr	r3, [pc, #232]	; (8000b48 <fsm_setting+0x2ac>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	601a      	str	r2, [r3, #0]
	                clearTrafficLight();
 8000a62:	f000 fd5f 	bl	8001524 <clearTrafficLight>
	            break;
 8000a66:	e06a      	b.n	8000b3e <fsm_setting+0x2a2>
	        	updateClockBuffer(mode4, temp_time);
 8000a68:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <fsm_setting+0x2d4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a37      	ldr	r2, [pc, #220]	; (8000b4c <fsm_setting+0x2b0>)
 8000a6e:	6812      	ldr	r2, [r2, #0]
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f880 	bl	8000b78 <updateClockBuffer>
	        	if(timer3_flag == 1){
 8000a78:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <fsm_setting+0x2bc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d104      	bne.n	8000a8a <fsm_setting+0x1ee>
	            toggleGreenLED();
 8000a80:	f000 fd96 	bl	80015b0 <toggleGreenLED>
	            setTimer3(50);
 8000a84:	2032      	movs	r0, #50	; 0x32
 8000a86:	f000 fbfd 	bl	8001284 <setTimer3>
				if(timer2_flag == 1){
 8000a8a:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <fsm_setting+0x2b4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d112      	bne.n	8000ab8 <fsm_setting+0x21c>
					setTimer2(25);
 8000a92:	2019      	movs	r0, #25
 8000a94:	f000 fbe2 	bl	800125c <setTimer2>
					update7SEG(num);
 8000a98:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <fsm_setting+0x2b8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fa1f 	bl	8000ee0 <update7SEG>
					num = (num + 1) % MAX;
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <fsm_setting+0x2b8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	fb93 f1f2 	sdiv	r1, r3, r2
 8000aae:	fb02 f201 	mul.w	r2, r2, r1
 8000ab2:	1a9b      	subs	r3, r3, r2
 8000ab4:	4a27      	ldr	r2, [pc, #156]	; (8000b54 <fsm_setting+0x2b8>)
 8000ab6:	6013      	str	r3, [r2, #0]
	            if (isButtonPressed(0) == 1) {
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f7ff fb47 	bl	800014c <isButtonPressed>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d105      	bne.n	8000ad0 <fsm_setting+0x234>
	                status = MODE_2;
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <fsm_setting+0x2ac>)
 8000ac6:	220a      	movs	r2, #10
 8000ac8:	601a      	str	r2, [r3, #0]
	                temp_time = 1;
 8000aca:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <fsm_setting+0x2b0>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	601a      	str	r2, [r3, #0]
	            if (isButtonPressed(1) == 1) {
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff fb3b 	bl	800014c <isButtonPressed>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d10b      	bne.n	8000af4 <fsm_setting+0x258>
	                temp_time++;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <fsm_setting+0x2b0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <fsm_setting+0x2b0>)
 8000ae4:	6013      	str	r3, [r2, #0]
	                if (temp_time > 99) {
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <fsm_setting+0x2b0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b63      	cmp	r3, #99	; 0x63
 8000aec:	dd02      	ble.n	8000af4 <fsm_setting+0x258>
	                	temp_time = 1;
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <fsm_setting+0x2b0>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	601a      	str	r2, [r3, #0]
	            if (isButtonPressed(2) == 1) {
 8000af4:	2002      	movs	r0, #2
 8000af6:	f7ff fb29 	bl	800014c <isButtonPressed>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d120      	bne.n	8000b42 <fsm_setting+0x2a6>
	                green_time = temp_time;
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <fsm_setting+0x2b0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <fsm_setting+0x2c8>)
 8000b06:	6013      	str	r3, [r2, #0]
	                yellow_time = (2 * green_time /3);
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <fsm_setting+0x2c8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <fsm_setting+0x2d8>)
 8000b10:	fb82 1203 	smull	r1, r2, r2, r3
 8000b14:	17db      	asrs	r3, r3, #31
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <fsm_setting+0x2cc>)
 8000b1a:	6013      	str	r3, [r2, #0]
	                red_time = green_time + yellow_time;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <fsm_setting+0x2c8>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <fsm_setting+0x2cc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4413      	add	r3, r2
 8000b26:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <fsm_setting+0x2c0>)
 8000b28:	6013      	str	r3, [r2, #0]
	                status = AUTO_RED_GREEN;
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <fsm_setting+0x2ac>)
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	601a      	str	r2, [r3, #0]
	                clearTrafficLight();
 8000b30:	f000 fcf8 	bl	8001524 <clearTrafficLight>
	            break;
 8000b34:	e005      	b.n	8000b42 <fsm_setting+0x2a6>
	            break;
 8000b36:	bf00      	nop
 8000b38:	e004      	b.n	8000b44 <fsm_setting+0x2a8>
	            break;
 8000b3a:	bf00      	nop
 8000b3c:	e002      	b.n	8000b44 <fsm_setting+0x2a8>
	            break;
 8000b3e:	bf00      	nop
 8000b40:	e000      	b.n	8000b44 <fsm_setting+0x2a8>
	            break;
 8000b42:	bf00      	nop
	    }
	}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000003c 	.word	0x2000003c
 8000b4c:	2000004c 	.word	0x2000004c
 8000b50:	200000a0 	.word	0x200000a0
 8000b54:	20000090 	.word	0x20000090
 8000b58:	200000a8 	.word	0x200000a8
 8000b5c:	20000040 	.word	0x20000040
 8000b60:	66666667 	.word	0x66666667
 8000b64:	20000044 	.word	0x20000044
 8000b68:	20000048 	.word	0x20000048
 8000b6c:	20000034 	.word	0x20000034
 8000b70:	20000038 	.word	0x20000038
 8000b74:	55555556 	.word	0x55555556

08000b78 <updateClockBuffer>:
 */

#include "led7_segment.h"

int led_buffer[4];
void updateClockBuffer(int hour, int minute) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
    led_buffer[0] = hour / 10;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <updateClockBuffer+0x70>)
 8000b86:	fb82 1203 	smull	r1, r2, r2, r3
 8000b8a:	1092      	asrs	r2, r2, #2
 8000b8c:	17db      	asrs	r3, r3, #31
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	4a16      	ldr	r2, [pc, #88]	; (8000bec <updateClockBuffer+0x74>)
 8000b92:	6013      	str	r3, [r2, #0]
    led_buffer[1] = hour % 10;
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <updateClockBuffer+0x70>)
 8000b98:	fb83 2301 	smull	r2, r3, r3, r1
 8000b9c:	109a      	asrs	r2, r3, #2
 8000b9e:	17cb      	asrs	r3, r1, #31
 8000ba0:	1ad2      	subs	r2, r2, r3
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	1aca      	subs	r2, r1, r3
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <updateClockBuffer+0x74>)
 8000bae:	605a      	str	r2, [r3, #4]
    led_buffer[2] = minute / 10;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <updateClockBuffer+0x70>)
 8000bb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb8:	1092      	asrs	r2, r2, #2
 8000bba:	17db      	asrs	r3, r3, #31
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <updateClockBuffer+0x74>)
 8000bc0:	6093      	str	r3, [r2, #8]
    led_buffer[3] = minute % 10;
 8000bc2:	6839      	ldr	r1, [r7, #0]
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <updateClockBuffer+0x70>)
 8000bc6:	fb83 2301 	smull	r2, r3, r3, r1
 8000bca:	109a      	asrs	r2, r3, #2
 8000bcc:	17cb      	asrs	r3, r1, #31
 8000bce:	1ad2      	subs	r2, r2, r3
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	1aca      	subs	r2, r1, r3
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <updateClockBuffer+0x74>)
 8000bdc:	60da      	str	r2, [r3, #12]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	66666667 	.word	0x66666667
 8000bec:	200000b4 	.word	0x200000b4

08000bf0 <display7SEG>:


void display7SEG(int num)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	48b7      	ldr	r0, [pc, #732]	; (8000edc <display7SEG+0x2ec>)
 8000bfe:	f001 f80e 	bl	8001c1e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c08:	48b4      	ldr	r0, [pc, #720]	; (8000edc <display7SEG+0x2ec>)
 8000c0a:	f001 f808 	bl	8001c1e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	48b1      	ldr	r0, [pc, #708]	; (8000edc <display7SEG+0x2ec>)
 8000c16:	f001 f802 	bl	8001c1e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c20:	48ae      	ldr	r0, [pc, #696]	; (8000edc <display7SEG+0x2ec>)
 8000c22:	f000 fffc 	bl	8001c1e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c2c:	48ab      	ldr	r0, [pc, #684]	; (8000edc <display7SEG+0x2ec>)
 8000c2e:	f000 fff6 	bl	8001c1e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c38:	48a8      	ldr	r0, [pc, #672]	; (8000edc <display7SEG+0x2ec>)
 8000c3a:	f000 fff0 	bl	8001c1e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c44:	48a5      	ldr	r0, [pc, #660]	; (8000edc <display7SEG+0x2ec>)
 8000c46:	f000 ffea 	bl	8001c1e <HAL_GPIO_WritePin>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b09      	cmp	r3, #9
 8000c4e:	f200 813f 	bhi.w	8000ed0 <display7SEG+0x2e0>
 8000c52:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <display7SEG+0x68>)
 8000c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	08000cc9 	.word	0x08000cc9
 8000c60:	08000ce3 	.word	0x08000ce3
 8000c64:	08000d1f 	.word	0x08000d1f
 8000c68:	08000d5b 	.word	0x08000d5b
 8000c6c:	08000d8d 	.word	0x08000d8d
 8000c70:	08000dc9 	.word	0x08000dc9
 8000c74:	08000e11 	.word	0x08000e11
 8000c78:	08000e35 	.word	0x08000e35
 8000c7c:	08000e89 	.word	0x08000e89

    switch(num) {
        case 0:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	4895      	ldr	r0, [pc, #596]	; (8000edc <display7SEG+0x2ec>)
 8000c86:	f000 ffca 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c90:	4892      	ldr	r0, [pc, #584]	; (8000edc <display7SEG+0x2ec>)
 8000c92:	f000 ffc4 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c9c:	488f      	ldr	r0, [pc, #572]	; (8000edc <display7SEG+0x2ec>)
 8000c9e:	f000 ffbe 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca8:	488c      	ldr	r0, [pc, #560]	; (8000edc <display7SEG+0x2ec>)
 8000caa:	f000 ffb8 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb4:	4889      	ldr	r0, [pc, #548]	; (8000edc <display7SEG+0x2ec>)
 8000cb6:	f000 ffb2 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc0:	4886      	ldr	r0, [pc, #536]	; (8000edc <display7SEG+0x2ec>)
 8000cc2:	f000 ffac 	bl	8001c1e <HAL_GPIO_WritePin>
            break;
 8000cc6:	e104      	b.n	8000ed2 <display7SEG+0x2e2>
        case 1:
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cce:	4883      	ldr	r0, [pc, #524]	; (8000edc <display7SEG+0x2ec>)
 8000cd0:	f000 ffa5 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cda:	4880      	ldr	r0, [pc, #512]	; (8000edc <display7SEG+0x2ec>)
 8000cdc:	f000 ff9f 	bl	8001c1e <HAL_GPIO_WritePin>
            break;
 8000ce0:	e0f7      	b.n	8000ed2 <display7SEG+0x2e2>
        case 2:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	487d      	ldr	r0, [pc, #500]	; (8000edc <display7SEG+0x2ec>)
 8000ce8:	f000 ff99 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf2:	487a      	ldr	r0, [pc, #488]	; (8000edc <display7SEG+0x2ec>)
 8000cf4:	f000 ff93 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfe:	4877      	ldr	r0, [pc, #476]	; (8000edc <display7SEG+0x2ec>)
 8000d00:	f000 ff8d 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d0a:	4874      	ldr	r0, [pc, #464]	; (8000edc <display7SEG+0x2ec>)
 8000d0c:	f000 ff87 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d16:	4871      	ldr	r0, [pc, #452]	; (8000edc <display7SEG+0x2ec>)
 8000d18:	f000 ff81 	bl	8001c1e <HAL_GPIO_WritePin>
            break;
 8000d1c:	e0d9      	b.n	8000ed2 <display7SEG+0x2e2>
        case 3:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	486e      	ldr	r0, [pc, #440]	; (8000edc <display7SEG+0x2ec>)
 8000d24:	f000 ff7b 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2e:	486b      	ldr	r0, [pc, #428]	; (8000edc <display7SEG+0x2ec>)
 8000d30:	f000 ff75 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3a:	4868      	ldr	r0, [pc, #416]	; (8000edc <display7SEG+0x2ec>)
 8000d3c:	f000 ff6f 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d46:	4865      	ldr	r0, [pc, #404]	; (8000edc <display7SEG+0x2ec>)
 8000d48:	f000 ff69 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d52:	4862      	ldr	r0, [pc, #392]	; (8000edc <display7SEG+0x2ec>)
 8000d54:	f000 ff63 	bl	8001c1e <HAL_GPIO_WritePin>
            break;
 8000d58:	e0bb      	b.n	8000ed2 <display7SEG+0x2e2>
        case 4:
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d60:	485e      	ldr	r0, [pc, #376]	; (8000edc <display7SEG+0x2ec>)
 8000d62:	f000 ff5c 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6c:	485b      	ldr	r0, [pc, #364]	; (8000edc <display7SEG+0x2ec>)
 8000d6e:	f000 ff56 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d78:	4858      	ldr	r0, [pc, #352]	; (8000edc <display7SEG+0x2ec>)
 8000d7a:	f000 ff50 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d84:	4855      	ldr	r0, [pc, #340]	; (8000edc <display7SEG+0x2ec>)
 8000d86:	f000 ff4a 	bl	8001c1e <HAL_GPIO_WritePin>
            break;
 8000d8a:	e0a2      	b.n	8000ed2 <display7SEG+0x2e2>
        case 5:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	4852      	ldr	r0, [pc, #328]	; (8000edc <display7SEG+0x2ec>)
 8000d92:	f000 ff44 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9c:	484f      	ldr	r0, [pc, #316]	; (8000edc <display7SEG+0x2ec>)
 8000d9e:	f000 ff3e 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da8:	484c      	ldr	r0, [pc, #304]	; (8000edc <display7SEG+0x2ec>)
 8000daa:	f000 ff38 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db4:	4849      	ldr	r0, [pc, #292]	; (8000edc <display7SEG+0x2ec>)
 8000db6:	f000 ff32 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc0:	4846      	ldr	r0, [pc, #280]	; (8000edc <display7SEG+0x2ec>)
 8000dc2:	f000 ff2c 	bl	8001c1e <HAL_GPIO_WritePin>
            break;
 8000dc6:	e084      	b.n	8000ed2 <display7SEG+0x2e2>
        case 6:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2180      	movs	r1, #128	; 0x80
 8000dcc:	4843      	ldr	r0, [pc, #268]	; (8000edc <display7SEG+0x2ec>)
 8000dce:	f000 ff26 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd8:	4840      	ldr	r0, [pc, #256]	; (8000edc <display7SEG+0x2ec>)
 8000dda:	f000 ff20 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de4:	483d      	ldr	r0, [pc, #244]	; (8000edc <display7SEG+0x2ec>)
 8000de6:	f000 ff1a 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df0:	483a      	ldr	r0, [pc, #232]	; (8000edc <display7SEG+0x2ec>)
 8000df2:	f000 ff14 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dfc:	4837      	ldr	r0, [pc, #220]	; (8000edc <display7SEG+0x2ec>)
 8000dfe:	f000 ff0e 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e08:	4834      	ldr	r0, [pc, #208]	; (8000edc <display7SEG+0x2ec>)
 8000e0a:	f000 ff08 	bl	8001c1e <HAL_GPIO_WritePin>
            break;
 8000e0e:	e060      	b.n	8000ed2 <display7SEG+0x2e2>
        case 7:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	4831      	ldr	r0, [pc, #196]	; (8000edc <display7SEG+0x2ec>)
 8000e16:	f000 ff02 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e20:	482e      	ldr	r0, [pc, #184]	; (8000edc <display7SEG+0x2ec>)
 8000e22:	f000 fefc 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2c:	482b      	ldr	r0, [pc, #172]	; (8000edc <display7SEG+0x2ec>)
 8000e2e:	f000 fef6 	bl	8001c1e <HAL_GPIO_WritePin>
            break;
 8000e32:	e04e      	b.n	8000ed2 <display7SEG+0x2e2>
        case 8:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	4828      	ldr	r0, [pc, #160]	; (8000edc <display7SEG+0x2ec>)
 8000e3a:	f000 fef0 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e44:	4825      	ldr	r0, [pc, #148]	; (8000edc <display7SEG+0x2ec>)
 8000e46:	f000 feea 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e50:	4822      	ldr	r0, [pc, #136]	; (8000edc <display7SEG+0x2ec>)
 8000e52:	f000 fee4 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5c:	481f      	ldr	r0, [pc, #124]	; (8000edc <display7SEG+0x2ec>)
 8000e5e:	f000 fede 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e68:	481c      	ldr	r0, [pc, #112]	; (8000edc <display7SEG+0x2ec>)
 8000e6a:	f000 fed8 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e74:	4819      	ldr	r0, [pc, #100]	; (8000edc <display7SEG+0x2ec>)
 8000e76:	f000 fed2 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e80:	4816      	ldr	r0, [pc, #88]	; (8000edc <display7SEG+0x2ec>)
 8000e82:	f000 fecc 	bl	8001c1e <HAL_GPIO_WritePin>
            break;
 8000e86:	e024      	b.n	8000ed2 <display7SEG+0x2e2>
        case 9:
            HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2180      	movs	r1, #128	; 0x80
 8000e8c:	4813      	ldr	r0, [pc, #76]	; (8000edc <display7SEG+0x2ec>)
 8000e8e:	f000 fec6 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e98:	4810      	ldr	r0, [pc, #64]	; (8000edc <display7SEG+0x2ec>)
 8000e9a:	f000 fec0 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <display7SEG+0x2ec>)
 8000ea6:	f000 feba 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb0:	480a      	ldr	r0, [pc, #40]	; (8000edc <display7SEG+0x2ec>)
 8000eb2:	f000 feb4 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <display7SEG+0x2ec>)
 8000ebe:	f000 feae 	bl	8001c1e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <display7SEG+0x2ec>)
 8000eca:	f000 fea8 	bl	8001c1e <HAL_GPIO_WritePin>
            break;
 8000ece:	e000      	b.n	8000ed2 <display7SEG+0x2e2>
        default :
        	break ;
 8000ed0:	bf00      	nop
    }
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40010800 	.word	0x40010800

08000ee0 <update7SEG>:

void update7SEG(int index) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2108      	movs	r1, #8
 8000eec:	4846      	ldr	r0, [pc, #280]	; (8001008 <update7SEG+0x128>)
 8000eee:	f000 fe96 	bl	8001c1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	4844      	ldr	r0, [pc, #272]	; (8001008 <update7SEG+0x128>)
 8000ef8:	f000 fe91 	bl	8001c1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2120      	movs	r1, #32
 8000f00:	4841      	ldr	r0, [pc, #260]	; (8001008 <update7SEG+0x128>)
 8000f02:	f000 fe8c 	bl	8001c1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2140      	movs	r1, #64	; 0x40
 8000f0a:	483f      	ldr	r0, [pc, #252]	; (8001008 <update7SEG+0x128>)
 8000f0c:	f000 fe87 	bl	8001c1e <HAL_GPIO_WritePin>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d872      	bhi.n	8000ffc <update7SEG+0x11c>
 8000f16:	a201      	add	r2, pc, #4	; (adr r2, 8000f1c <update7SEG+0x3c>)
 8000f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1c:	08000f2d 	.word	0x08000f2d
 8000f20:	08000f61 	.word	0x08000f61
 8000f24:	08000f95 	.word	0x08000f95
 8000f28:	08000fc9 	.word	0x08000fc9
switch (index) {
	case 0:
	// Display the first 7 SEG with led_buffer [0]
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2108      	movs	r1, #8
 8000f30:	4835      	ldr	r0, [pc, #212]	; (8001008 <update7SEG+0x128>)
 8000f32:	f000 fe74 	bl	8001c1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	2110      	movs	r1, #16
 8000f3a:	4833      	ldr	r0, [pc, #204]	; (8001008 <update7SEG+0x128>)
 8000f3c:	f000 fe6f 	bl	8001c1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2120      	movs	r1, #32
 8000f44:	4830      	ldr	r0, [pc, #192]	; (8001008 <update7SEG+0x128>)
 8000f46:	f000 fe6a 	bl	8001c1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2140      	movs	r1, #64	; 0x40
 8000f4e:	482e      	ldr	r0, [pc, #184]	; (8001008 <update7SEG+0x128>)
 8000f50:	f000 fe65 	bl	8001c1e <HAL_GPIO_WritePin>
        display7SEG(led_buffer[0]);
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <update7SEG+0x12c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe49 	bl	8000bf0 <display7SEG>
        break ;
 8000f5e:	e04e      	b.n	8000ffe <update7SEG+0x11e>
	case 1:
	// Display the second 7 SEG with led_buffer [1]
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2108      	movs	r1, #8
 8000f64:	4828      	ldr	r0, [pc, #160]	; (8001008 <update7SEG+0x128>)
 8000f66:	f000 fe5a 	bl	8001c1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	4826      	ldr	r0, [pc, #152]	; (8001008 <update7SEG+0x128>)
 8000f70:	f000 fe55 	bl	8001c1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2120      	movs	r1, #32
 8000f78:	4823      	ldr	r0, [pc, #140]	; (8001008 <update7SEG+0x128>)
 8000f7a:	f000 fe50 	bl	8001c1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2140      	movs	r1, #64	; 0x40
 8000f82:	4821      	ldr	r0, [pc, #132]	; (8001008 <update7SEG+0x128>)
 8000f84:	f000 fe4b 	bl	8001c1e <HAL_GPIO_WritePin>
        display7SEG(led_buffer[1]);
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <update7SEG+0x12c>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fe2f 	bl	8000bf0 <display7SEG>
        break ;
 8000f92:	e034      	b.n	8000ffe <update7SEG+0x11e>
	case 2:
	// Display the third 7 SEG with led_buffer [2]
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2108      	movs	r1, #8
 8000f98:	481b      	ldr	r0, [pc, #108]	; (8001008 <update7SEG+0x128>)
 8000f9a:	f000 fe40 	bl	8001c1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	4819      	ldr	r0, [pc, #100]	; (8001008 <update7SEG+0x128>)
 8000fa4:	f000 fe3b 	bl	8001c1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2120      	movs	r1, #32
 8000fac:	4816      	ldr	r0, [pc, #88]	; (8001008 <update7SEG+0x128>)
 8000fae:	f000 fe36 	bl	8001c1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2140      	movs	r1, #64	; 0x40
 8000fb6:	4814      	ldr	r0, [pc, #80]	; (8001008 <update7SEG+0x128>)
 8000fb8:	f000 fe31 	bl	8001c1e <HAL_GPIO_WritePin>
        display7SEG(led_buffer[2]);
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <update7SEG+0x12c>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fe15 	bl	8000bf0 <display7SEG>
        break ;
 8000fc6:	e01a      	b.n	8000ffe <update7SEG+0x11e>
	case 3:
	// Display the forth 7 SEG with led_buffer [3]
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2108      	movs	r1, #8
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <update7SEG+0x128>)
 8000fce:	f000 fe26 	bl	8001c1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <update7SEG+0x128>)
 8000fd8:	f000 fe21 	bl	8001c1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2120      	movs	r1, #32
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <update7SEG+0x128>)
 8000fe2:	f000 fe1c 	bl	8001c1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2140      	movs	r1, #64	; 0x40
 8000fea:	4807      	ldr	r0, [pc, #28]	; (8001008 <update7SEG+0x128>)
 8000fec:	f000 fe17 	bl	8001c1e <HAL_GPIO_WritePin>
        display7SEG(led_buffer[3]);
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <update7SEG+0x12c>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fdfb 	bl	8000bf0 <display7SEG>
        break ;
 8000ffa:	e000      	b.n	8000ffe <update7SEG+0x11e>
	default :
		break ;
 8000ffc:	bf00      	nop
	}
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40010c00 	.word	0x40010c00
 800100c:	200000b4 	.word	0x200000b4

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f000 fb02 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f810 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 f896 	bl	800114c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001020:	f000 f848 	bl	80010b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2) ;
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <main+0x28>)
 8001026:	f001 fa57 	bl	80024d8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  fsm_automatic_run();
 800102a:	f7ff f949 	bl	80002c0 <fsm_automatic_run>
	  fsm_manual_run();
 800102e:	f7ff fb83 	bl	8000738 <fsm_manual_run>
	  fsm_setting();
 8001032:	f7ff fc33 	bl	800089c <fsm_setting>
	  fsm_automatic_run();
 8001036:	e7f8      	b.n	800102a <main+0x1a>
 8001038:	200000c4 	.word	0x200000c4

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b090      	sub	sp, #64	; 0x40
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0318 	add.w	r3, r7, #24
 8001046:	2228      	movs	r2, #40	; 0x28
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fdf4 	bl	8002c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001062:	2301      	movs	r3, #1
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001066:	2310      	movs	r3, #16
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800106a:	2300      	movs	r3, #0
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106e:	f107 0318 	add.w	r3, r7, #24
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fe04 	bl	8001c80 <HAL_RCC_OscConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800107e:	f000 f8d3 	bl	8001228 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f001 f870 	bl	8002180 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010a6:	f000 f8bf 	bl	8001228 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3740      	adds	r7, #64	; 0x40
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	463b      	mov	r3, r7
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MX_TIM2_Init+0x94>)
 80010d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <MX_TIM2_Init+0x94>)
 80010da:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <MX_TIM2_Init+0x94>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_TIM2_Init+0x94>)
 80010e8:	2209      	movs	r2, #9
 80010ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_TIM2_Init+0x94>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_TIM2_Init+0x94>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f8:	4813      	ldr	r0, [pc, #76]	; (8001148 <MX_TIM2_Init+0x94>)
 80010fa:	f001 f99d 	bl	8002438 <HAL_TIM_Base_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001104:	f000 f890 	bl	8001228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	4619      	mov	r1, r3
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <MX_TIM2_Init+0x94>)
 8001116:	f001 fb1b 	bl	8002750 <HAL_TIM_ConfigClockSource>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001120:	f000 f882 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800112c:	463b      	mov	r3, r7
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_TIM2_Init+0x94>)
 8001132:	f001 fcf3 	bl	8002b1c <HAL_TIMEx_MasterConfigSynchronization>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800113c:	f000 f874 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200000c4 	.word	0x200000c4

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <MX_GPIO_Init+0xb8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a27      	ldr	r2, [pc, #156]	; (8001204 <MX_GPIO_Init+0xb8>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <MX_GPIO_Init+0xb8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_GPIO_Init+0xb8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <MX_GPIO_Init+0xb8>)
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_GPIO_Init+0xb8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8001190:	2200      	movs	r2, #0
 8001192:	f643 71f2 	movw	r1, #16370	; 0x3ff2
 8001196:	481c      	ldr	r0, [pc, #112]	; (8001208 <MX_GPIO_Init+0xbc>)
 8001198:	f000 fd41 	bl	8001c1e <HAL_GPIO_WritePin>
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_Pin
 800119c:	2200      	movs	r2, #0
 800119e:	217f      	movs	r1, #127	; 0x7f
 80011a0:	481a      	ldr	r0, [pc, #104]	; (800120c <MX_GPIO_Init+0xc0>)
 80011a2:	f000 fd3c 	bl	8001c1e <HAL_GPIO_WritePin>
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin
                           SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 80011a6:	f643 73f2 	movw	r3, #16370	; 0x3ff2
 80011aa:	60bb      	str	r3, [r7, #8]
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2302      	movs	r3, #2
 80011b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	4619      	mov	r1, r3
 80011be:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0xbc>)
 80011c0:	f000 fb9c 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED2_Pin LED_YELLOW2_Pin LED_GREEN2_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_Pin
 80011c4:	237f      	movs	r3, #127	; 0x7f
 80011c6:	60bb      	str	r3, [r7, #8]
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2302      	movs	r3, #2
 80011d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	4619      	mov	r1, r3
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0xc0>)
 80011dc:	f000 fb8e 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : B0_Pin B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B0_Pin|B1_Pin|B2_Pin;
 80011e0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80011e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_GPIO_Init+0xc0>)
 80011f6:	f000 fb81 	bl	80018fc <HAL_GPIO_Init>

}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
 8001208:	40010800 	.word	0x40010800
 800120c:	40010c00 	.word	0x40010c00

08001210 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	timerRun();
 8001218:	f000 f848 	bl	80012ac <timerRun>
	getKeyInput();
 800121c:	f7fe ffb0 	bl	8000180 <getKeyInput>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	e7fe      	b.n	8001230 <Error_Handler+0x8>
	...

08001234 <setTimer1>:
void setTimer0(int duration) {
	timer0_counter = duration;
	timer0_flag = 0;
}

void setTimer1(int duration) {
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 800123c:	4a05      	ldr	r2, [pc, #20]	; (8001254 <setTimer1+0x20>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <setTimer1+0x24>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000094 	.word	0x20000094
 8001258:	20000098 	.word	0x20000098

0800125c <setTimer2>:
void clearTimer1(){
	timer1_counter = 0;
	timer1_flag = 0;
}

void setTimer2(int duration){
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <setTimer2+0x20>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <setTimer2+0x24>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	2000009c 	.word	0x2000009c
 8001280:	200000a0 	.word	0x200000a0

08001284 <setTimer3>:

void setTimer3(int duration) {
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 800128c:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <setTimer3+0x20>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <setTimer3+0x24>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	200000a4 	.word	0x200000a4
 80012a8:	200000a8 	.word	0x200000a8

080012ac <timerRun>:
void timerRun(){
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80012b0:	4b29      	ldr	r3, [pc, #164]	; (8001358 <timerRun+0xac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	dd0c      	ble.n	80012d2 <timerRun+0x26>
		timer1_counter--;
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <timerRun+0xac>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3b01      	subs	r3, #1
 80012be:	4a26      	ldr	r2, [pc, #152]	; (8001358 <timerRun+0xac>)
 80012c0:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <timerRun+0xac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	dc06      	bgt.n	80012d8 <timerRun+0x2c>
		timer1_flag = 1;
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <timerRun+0xb0>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e002      	b.n	80012d8 <timerRun+0x2c>
		}
	}
	else{
		timer1_flag = 1;
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <timerRun+0xb0>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter >0){
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <timerRun+0xb4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	dd0c      	ble.n	80012fa <timerRun+0x4e>
			timer2_counter--;
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <timerRun+0xb4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <timerRun+0xb4>)
 80012e8:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0){
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <timerRun+0xb4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	dc06      	bgt.n	8001300 <timerRun+0x54>
				timer2_flag = 1;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <timerRun+0xb8>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e002      	b.n	8001300 <timerRun+0x54>
			}
		}
	else{
			timer2_flag = 1;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <timerRun+0xb8>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
		}
	if (timer3_counter > 0) {
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <timerRun+0xbc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	dd0c      	ble.n	8001322 <timerRun+0x76>
			timer3_counter--;
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <timerRun+0xbc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3b01      	subs	r3, #1
 800130e:	4a16      	ldr	r2, [pc, #88]	; (8001368 <timerRun+0xbc>)
 8001310:	6013      	str	r3, [r2, #0]
	        if (timer3_counter <= 0) {
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <timerRun+0xbc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	dc06      	bgt.n	8001328 <timerRun+0x7c>
	        	timer3_flag = 1;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <timerRun+0xc0>)
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e002      	b.n	8001328 <timerRun+0x7c>
	        }
	}
	else{
			timer3_flag = 1;
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <timerRun+0xc0>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]
		}
	if (timer0_counter > 0) {
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <timerRun+0xc4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	dd0c      	ble.n	800134a <timerRun+0x9e>
		timer0_counter--;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <timerRun+0xc4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3b01      	subs	r3, #1
 8001336:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <timerRun+0xc4>)
 8001338:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0)
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <timerRun+0xc4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <timerRun+0xa4>
			timer0_flag = 1;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <timerRun+0xc8>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]
		}
	else{
			timer0_flag = 1;
		}
}
 8001348:	e002      	b.n	8001350 <timerRun+0xa4>
			timer0_flag = 1;
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <timerRun+0xc8>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	20000094 	.word	0x20000094
 800135c:	20000098 	.word	0x20000098
 8001360:	2000009c 	.word	0x2000009c
 8001364:	200000a0 	.word	0x200000a0
 8001368:	200000a4 	.word	0x200000a4
 800136c:	200000a8 	.word	0x200000a8
 8001370:	200000ac 	.word	0x200000ac
 8001374:	200000b0 	.word	0x200000b0

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_MspInit+0x5c>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <HAL_MspInit+0x5c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6193      	str	r3, [r2, #24]
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_MspInit+0x5c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_MspInit+0x5c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <HAL_MspInit+0x5c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_MspInit+0x5c>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_MspInit+0x60>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_MspInit+0x60>)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010000 	.word	0x40010000

080013dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ec:	d113      	bne.n	8001416 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <HAL_TIM_Base_MspInit+0x44>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <HAL_TIM_Base_MspInit+0x44>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_TIM_Base_MspInit+0x44>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	201c      	movs	r0, #28
 800140c:	f000 fa3f 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001410:	201c      	movs	r0, #28
 8001412:	f000 fa58 	bl	80018c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x4>

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146a:	f000 f91d 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <TIM2_IRQHandler+0x10>)
 800147a:	f001 f879 	bl	8002570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200000c4 	.word	0x200000c4

08001488 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <ledRedGreen>:
//
#include "traffic_light.h"



void ledRedGreen(){
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2110      	movs	r1, #16
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <ledRedGreen+0x1c>)
 800149e:	f000 fbbe 	bl	8001c1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	2104      	movs	r1, #4
 80014a6:	4803      	ldr	r0, [pc, #12]	; (80014b4 <ledRedGreen+0x20>)
 80014a8:	f000 fbb9 	bl	8001c1e <HAL_GPIO_WritePin>
	}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40010800 	.word	0x40010800
 80014b4:	40010c00 	.word	0x40010c00

080014b8 <ledRedYellow>:

void ledRedYellow(){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	2110      	movs	r1, #16
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <ledRedYellow+0x1c>)
 80014c2:	f000 fbac 	bl	8001c1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	2102      	movs	r1, #2
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <ledRedYellow+0x20>)
 80014cc:	f000 fba7 	bl	8001c1e <HAL_GPIO_WritePin>
	}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40010800 	.word	0x40010800
 80014d8:	40010c00 	.word	0x40010c00

080014dc <ledGreenRed>:

void ledGreenRed(){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2140      	movs	r1, #64	; 0x40
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <ledGreenRed+0x1c>)
 80014e6:	f000 fb9a 	bl	8001c1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2101      	movs	r1, #1
 80014ee:	4803      	ldr	r0, [pc, #12]	; (80014fc <ledGreenRed+0x20>)
 80014f0:	f000 fb95 	bl	8001c1e <HAL_GPIO_WritePin>
	}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40010800 	.word	0x40010800
 80014fc:	40010c00 	.word	0x40010c00

08001500 <ledYellowRed>:

void ledYellowRed(){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	2120      	movs	r1, #32
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <ledYellowRed+0x1c>)
 800150a:	f000 fb88 	bl	8001c1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	2101      	movs	r1, #1
 8001512:	4803      	ldr	r0, [pc, #12]	; (8001520 <ledYellowRed+0x20>)
 8001514:	f000 fb83 	bl	8001c1e <HAL_GPIO_WritePin>
	}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40010800 	.word	0x40010800
 8001520:	40010c00 	.word	0x40010c00

08001524 <clearTrafficLight>:

void clearTrafficLight(){
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	2110      	movs	r1, #16
 800152c:	480e      	ldr	r0, [pc, #56]	; (8001568 <clearTrafficLight+0x44>)
 800152e:	f000 fb76 	bl	8001c1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	2140      	movs	r1, #64	; 0x40
 8001536:	480c      	ldr	r0, [pc, #48]	; (8001568 <clearTrafficLight+0x44>)
 8001538:	f000 fb71 	bl	8001c1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	2120      	movs	r1, #32
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <clearTrafficLight+0x44>)
 8001542:	f000 fb6c 	bl	8001c1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2101      	movs	r1, #1
 800154a:	4808      	ldr	r0, [pc, #32]	; (800156c <clearTrafficLight+0x48>)
 800154c:	f000 fb67 	bl	8001c1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	2104      	movs	r1, #4
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <clearTrafficLight+0x48>)
 8001556:	f000 fb62 	bl	8001c1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2102      	movs	r1, #2
 800155e:	4803      	ldr	r0, [pc, #12]	; (800156c <clearTrafficLight+0x48>)
 8001560:	f000 fb5d 	bl	8001c1e <HAL_GPIO_WritePin>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40010800 	.word	0x40010800
 800156c:	40010c00 	.word	0x40010c00

08001570 <toggleRedLED>:

void toggleRedLED(){
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001574:	2110      	movs	r1, #16
 8001576:	4804      	ldr	r0, [pc, #16]	; (8001588 <toggleRedLED+0x18>)
 8001578:	f000 fb69 	bl	8001c4e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 800157c:	2101      	movs	r1, #1
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <toggleRedLED+0x1c>)
 8001580:	f000 fb65 	bl	8001c4e <HAL_GPIO_TogglePin>
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40010800 	.word	0x40010800
 800158c:	40010c00 	.word	0x40010c00

08001590 <toggleYellowLED>:

void toggleYellowLED(){
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8001594:	2120      	movs	r1, #32
 8001596:	4804      	ldr	r0, [pc, #16]	; (80015a8 <toggleYellowLED+0x18>)
 8001598:	f000 fb59 	bl	8001c4e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 800159c:	2102      	movs	r1, #2
 800159e:	4803      	ldr	r0, [pc, #12]	; (80015ac <toggleYellowLED+0x1c>)
 80015a0:	f000 fb55 	bl	8001c4e <HAL_GPIO_TogglePin>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40010800 	.word	0x40010800
 80015ac:	40010c00 	.word	0x40010c00

080015b0 <toggleGreenLED>:

void toggleGreenLED(){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80015b4:	2140      	movs	r1, #64	; 0x40
 80015b6:	4804      	ldr	r0, [pc, #16]	; (80015c8 <toggleGreenLED+0x18>)
 80015b8:	f000 fb49 	bl	8001c4e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 80015bc:	2104      	movs	r1, #4
 80015be:	4803      	ldr	r0, [pc, #12]	; (80015cc <toggleGreenLED+0x1c>)
 80015c0:	f000 fb45 	bl	8001c4e <HAL_GPIO_TogglePin>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40010800 	.word	0x40010800
 80015cc:	40010c00 	.word	0x40010c00

080015d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d0:	f7ff ff5a 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d4:	480b      	ldr	r0, [pc, #44]	; (8001604 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015d6:	490c      	ldr	r1, [pc, #48]	; (8001608 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015d8:	4a0c      	ldr	r2, [pc, #48]	; (800160c <LoopFillZerobss+0x16>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a09      	ldr	r2, [pc, #36]	; (8001610 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015ec:	4c09      	ldr	r4, [pc, #36]	; (8001614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015fa:	f001 faf9 	bl	8002bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015fe:	f7ff fd07 	bl	8001010 <main>
  bx lr
 8001602:	4770      	bx	lr
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800160c:	08002c8c 	.word	0x08002c8c
  ldr r2, =_sbss
 8001610:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001614:	20000110 	.word	0x20000110

08001618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC1_2_IRQHandler>
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_Init+0x28>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_Init+0x28>)
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 f923 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001632:	200f      	movs	r0, #15
 8001634:	f000 f808 	bl	8001648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001638:	f7ff fe9e 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40022000 	.word	0x40022000

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x54>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x58>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f93b 	bl	80018e2 <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00e      	b.n	8001694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d80a      	bhi.n	8001692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f000 f903 	bl	800188e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_InitTick+0x5c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000050 	.word	0x20000050
 80016a0:	20000058 	.word	0x20000058
 80016a4:	20000054 	.word	0x20000054

080016a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_IncTick+0x1c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_IncTick+0x20>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a03      	ldr	r2, [pc, #12]	; (80016c8 <HAL_IncTick+0x20>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	20000058 	.word	0x20000058
 80016c8:	2000010c 	.word	0x2000010c

080016cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b02      	ldr	r3, [pc, #8]	; (80016dc <HAL_GetTick+0x10>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	2000010c 	.word	0x2000010c

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4906      	ldr	r1, [pc, #24]	; (8001778 <__NVIC_EnableIRQ+0x34>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f7ff ff90 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff2d 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff42 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff90 	bl	80017d0 <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5f 	bl	800177c <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff35 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffa2 	bl	8001834 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b08b      	sub	sp, #44	; 0x2c
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190e:	e148      	b.n	8001ba2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001910:	2201      	movs	r2, #1
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	429a      	cmp	r2, r3
 800192a:	f040 8137 	bne.w	8001b9c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4aa3      	ldr	r2, [pc, #652]	; (8001bc0 <HAL_GPIO_Init+0x2c4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d05e      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001938:	4aa1      	ldr	r2, [pc, #644]	; (8001bc0 <HAL_GPIO_Init+0x2c4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d875      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800193e:	4aa1      	ldr	r2, [pc, #644]	; (8001bc4 <HAL_GPIO_Init+0x2c8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d058      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001944:	4a9f      	ldr	r2, [pc, #636]	; (8001bc4 <HAL_GPIO_Init+0x2c8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d86f      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800194a:	4a9f      	ldr	r2, [pc, #636]	; (8001bc8 <HAL_GPIO_Init+0x2cc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d052      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001950:	4a9d      	ldr	r2, [pc, #628]	; (8001bc8 <HAL_GPIO_Init+0x2cc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d869      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001956:	4a9d      	ldr	r2, [pc, #628]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d04c      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 800195c:	4a9b      	ldr	r2, [pc, #620]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d863      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001962:	4a9b      	ldr	r2, [pc, #620]	; (8001bd0 <HAL_GPIO_Init+0x2d4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d046      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001968:	4a99      	ldr	r2, [pc, #612]	; (8001bd0 <HAL_GPIO_Init+0x2d4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d85d      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800196e:	2b12      	cmp	r3, #18
 8001970:	d82a      	bhi.n	80019c8 <HAL_GPIO_Init+0xcc>
 8001972:	2b12      	cmp	r3, #18
 8001974:	d859      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001976:	a201      	add	r2, pc, #4	; (adr r2, 800197c <HAL_GPIO_Init+0x80>)
 8001978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197c:	080019f7 	.word	0x080019f7
 8001980:	080019d1 	.word	0x080019d1
 8001984:	080019e3 	.word	0x080019e3
 8001988:	08001a25 	.word	0x08001a25
 800198c:	08001a2b 	.word	0x08001a2b
 8001990:	08001a2b 	.word	0x08001a2b
 8001994:	08001a2b 	.word	0x08001a2b
 8001998:	08001a2b 	.word	0x08001a2b
 800199c:	08001a2b 	.word	0x08001a2b
 80019a0:	08001a2b 	.word	0x08001a2b
 80019a4:	08001a2b 	.word	0x08001a2b
 80019a8:	08001a2b 	.word	0x08001a2b
 80019ac:	08001a2b 	.word	0x08001a2b
 80019b0:	08001a2b 	.word	0x08001a2b
 80019b4:	08001a2b 	.word	0x08001a2b
 80019b8:	08001a2b 	.word	0x08001a2b
 80019bc:	08001a2b 	.word	0x08001a2b
 80019c0:	080019d9 	.word	0x080019d9
 80019c4:	080019ed 	.word	0x080019ed
 80019c8:	4a82      	ldr	r2, [pc, #520]	; (8001bd4 <HAL_GPIO_Init+0x2d8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ce:	e02c      	b.n	8001a2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e029      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	3304      	adds	r3, #4
 80019de:	623b      	str	r3, [r7, #32]
          break;
 80019e0:	e024      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	3308      	adds	r3, #8
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e01f      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	330c      	adds	r3, #12
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	e01a      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019fe:	2304      	movs	r3, #4
 8001a00:	623b      	str	r3, [r7, #32]
          break;
 8001a02:	e013      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	611a      	str	r2, [r3, #16]
          break;
 8001a16:	e009      	b.n	8001a2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	615a      	str	r2, [r3, #20]
          break;
 8001a22:	e003      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          break;
 8001a2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2bff      	cmp	r3, #255	; 0xff
 8001a30:	d801      	bhi.n	8001a36 <HAL_GPIO_Init+0x13a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	e001      	b.n	8001a3a <HAL_GPIO_Init+0x13e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2bff      	cmp	r3, #255	; 0xff
 8001a40:	d802      	bhi.n	8001a48 <HAL_GPIO_Init+0x14c>
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	e002      	b.n	8001a4e <HAL_GPIO_Init+0x152>
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	210f      	movs	r1, #15
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	401a      	ands	r2, r3
 8001a60:	6a39      	ldr	r1, [r7, #32]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8090 	beq.w	8001b9c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7c:	4b56      	ldr	r3, [pc, #344]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a55      	ldr	r2, [pc, #340]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b53      	ldr	r3, [pc, #332]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a94:	4a51      	ldr	r2, [pc, #324]	; (8001bdc <HAL_GPIO_Init+0x2e0>)
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a49      	ldr	r2, [pc, #292]	; (8001be0 <HAL_GPIO_Init+0x2e4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d00d      	beq.n	8001adc <HAL_GPIO_Init+0x1e0>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a48      	ldr	r2, [pc, #288]	; (8001be4 <HAL_GPIO_Init+0x2e8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d007      	beq.n	8001ad8 <HAL_GPIO_Init+0x1dc>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a47      	ldr	r2, [pc, #284]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_GPIO_Init+0x1d8>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e004      	b.n	8001ade <HAL_GPIO_Init+0x1e2>
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e002      	b.n	8001ade <HAL_GPIO_Init+0x1e2>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_GPIO_Init+0x1e2>
 8001adc:	2300      	movs	r3, #0
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	f002 0203 	and.w	r2, r2, #3
 8001ae4:	0092      	lsls	r2, r2, #2
 8001ae6:	4093      	lsls	r3, r2
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aee:	493b      	ldr	r1, [pc, #236]	; (8001bdc <HAL_GPIO_Init+0x2e0>)
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b08:	4b38      	ldr	r3, [pc, #224]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4937      	ldr	r1, [pc, #220]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	608b      	str	r3, [r1, #8]
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b16:	4b35      	ldr	r3, [pc, #212]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4933      	ldr	r1, [pc, #204]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d006      	beq.n	8001b3e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b30:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	492d      	ldr	r1, [pc, #180]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60cb      	str	r3, [r1, #12]
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	4929      	ldr	r1, [pc, #164]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4923      	ldr	r1, [pc, #140]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	491f      	ldr	r1, [pc, #124]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4919      	ldr	r1, [pc, #100]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4915      	ldr	r1, [pc, #84]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f47f aeaf 	bne.w	8001910 <HAL_GPIO_Init+0x14>
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	bf00      	nop
 8001bb6:	372c      	adds	r7, #44	; 0x2c
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	10320000 	.word	0x10320000
 8001bc4:	10310000 	.word	0x10310000
 8001bc8:	10220000 	.word	0x10220000
 8001bcc:	10210000 	.word	0x10210000
 8001bd0:	10120000 	.word	0x10120000
 8001bd4:	10110000 	.word	0x10110000
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	40010800 	.word	0x40010800
 8001be4:	40010c00 	.word	0x40010c00
 8001be8:	40011000 	.word	0x40011000
 8001bec:	40010400 	.word	0x40010400

08001bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e001      	b.n	8001c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	460b      	mov	r3, r1
 8001c28:	807b      	strh	r3, [r7, #2]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c2e:	787b      	ldrb	r3, [r7, #1]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c34:	887a      	ldrh	r2, [r7, #2]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c3a:	e003      	b.n	8001c44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	041a      	lsls	r2, r3, #16
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	611a      	str	r2, [r3, #16]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b085      	sub	sp, #20
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c60:	887a      	ldrh	r2, [r7, #2]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4013      	ands	r3, r2
 8001c66:	041a      	lsls	r2, r3, #16
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	400b      	ands	r3, r1
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	611a      	str	r2, [r3, #16]
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e26c      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8087 	beq.w	8001dae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca0:	4b92      	ldr	r3, [pc, #584]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d00c      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cac:	4b8f      	ldr	r3, [pc, #572]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d112      	bne.n	8001cde <HAL_RCC_OscConfig+0x5e>
 8001cb8:	4b8c      	ldr	r3, [pc, #560]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d10b      	bne.n	8001cde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc6:	4b89      	ldr	r3, [pc, #548]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d06c      	beq.n	8001dac <HAL_RCC_OscConfig+0x12c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d168      	bne.n	8001dac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e246      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x76>
 8001ce8:	4b80      	ldr	r3, [pc, #512]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a7f      	ldr	r2, [pc, #508]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e02e      	b.n	8001d54 <HAL_RCC_OscConfig+0xd4>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x98>
 8001cfe:	4b7b      	ldr	r3, [pc, #492]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a7a      	ldr	r2, [pc, #488]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	4b78      	ldr	r3, [pc, #480]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a77      	ldr	r2, [pc, #476]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e01d      	b.n	8001d54 <HAL_RCC_OscConfig+0xd4>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0xbc>
 8001d22:	4b72      	ldr	r3, [pc, #456]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a71      	ldr	r2, [pc, #452]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b6f      	ldr	r3, [pc, #444]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6e      	ldr	r2, [pc, #440]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0xd4>
 8001d3c:	4b6b      	ldr	r3, [pc, #428]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a6a      	ldr	r2, [pc, #424]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b68      	ldr	r3, [pc, #416]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a67      	ldr	r2, [pc, #412]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d013      	beq.n	8001d84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fcb6 	bl	80016cc <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff fcb2 	bl	80016cc <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e1fa      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4b5d      	ldr	r3, [pc, #372]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0xe4>
 8001d82:	e014      	b.n	8001dae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fca2 	bl	80016cc <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7ff fc9e 	bl	80016cc <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1e6      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x10c>
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d063      	beq.n	8001e82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dba:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dc6:	4b49      	ldr	r3, [pc, #292]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d11c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x18c>
 8001dd2:	4b46      	ldr	r3, [pc, #280]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d116      	bne.n	8001e0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dde:	4b43      	ldr	r3, [pc, #268]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_RCC_OscConfig+0x176>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e1ba      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4939      	ldr	r1, [pc, #228]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	e03a      	b.n	8001e82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e14:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <HAL_RCC_OscConfig+0x270>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fc57 	bl	80016cc <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e22:	f7ff fc53 	bl	80016cc <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e19b      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4927      	ldr	r1, [pc, #156]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
 8001e54:	e015      	b.n	8001e82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <HAL_RCC_OscConfig+0x270>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fc36 	bl	80016cc <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e64:	f7ff fc32 	bl	80016cc <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e17a      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d03a      	beq.n	8001f04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d019      	beq.n	8001eca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_RCC_OscConfig+0x274>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9c:	f7ff fc16 	bl	80016cc <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fc12 	bl	80016cc <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e15a      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f000 fa9a 	bl	80023fc <RCC_Delay>
 8001ec8:	e01c      	b.n	8001f04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fbfc 	bl	80016cc <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed6:	e00f      	b.n	8001ef8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fbf8 	bl	80016cc <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d908      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e140      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	42420000 	.word	0x42420000
 8001ef4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef8:	4b9e      	ldr	r3, [pc, #632]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1e9      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80a6 	beq.w	800205e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f16:	4b97      	ldr	r3, [pc, #604]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10d      	bne.n	8001f3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	4b94      	ldr	r3, [pc, #592]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4a93      	ldr	r2, [pc, #588]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	61d3      	str	r3, [r2, #28]
 8001f2e:	4b91      	ldr	r3, [pc, #580]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3e:	4b8e      	ldr	r3, [pc, #568]	; (8002178 <HAL_RCC_OscConfig+0x4f8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d118      	bne.n	8001f7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4a:	4b8b      	ldr	r3, [pc, #556]	; (8002178 <HAL_RCC_OscConfig+0x4f8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a8a      	ldr	r2, [pc, #552]	; (8002178 <HAL_RCC_OscConfig+0x4f8>)
 8001f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f56:	f7ff fbb9 	bl	80016cc <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5e:	f7ff fbb5 	bl	80016cc <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b64      	cmp	r3, #100	; 0x64
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e0fd      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	4b81      	ldr	r3, [pc, #516]	; (8002178 <HAL_RCC_OscConfig+0x4f8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x312>
 8001f84:	4b7b      	ldr	r3, [pc, #492]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a7a      	ldr	r2, [pc, #488]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	e02d      	b.n	8001fee <HAL_RCC_OscConfig+0x36e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x334>
 8001f9a:	4b76      	ldr	r3, [pc, #472]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a75      	ldr	r2, [pc, #468]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6213      	str	r3, [r2, #32]
 8001fa6:	4b73      	ldr	r3, [pc, #460]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a72      	ldr	r2, [pc, #456]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	6213      	str	r3, [r2, #32]
 8001fb2:	e01c      	b.n	8001fee <HAL_RCC_OscConfig+0x36e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d10c      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x356>
 8001fbc:	4b6d      	ldr	r3, [pc, #436]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a6c      	ldr	r2, [pc, #432]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	4b6a      	ldr	r3, [pc, #424]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4a69      	ldr	r2, [pc, #420]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6213      	str	r3, [r2, #32]
 8001fd4:	e00b      	b.n	8001fee <HAL_RCC_OscConfig+0x36e>
 8001fd6:	4b67      	ldr	r3, [pc, #412]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a66      	ldr	r2, [pc, #408]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6213      	str	r3, [r2, #32]
 8001fe2:	4b64      	ldr	r3, [pc, #400]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a63      	ldr	r2, [pc, #396]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	f023 0304 	bic.w	r3, r3, #4
 8001fec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d015      	beq.n	8002022 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff6:	f7ff fb69 	bl	80016cc <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7ff fb65 	bl	80016cc <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e0ab      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	4b57      	ldr	r3, [pc, #348]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ee      	beq.n	8001ffe <HAL_RCC_OscConfig+0x37e>
 8002020:	e014      	b.n	800204c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002022:	f7ff fb53 	bl	80016cc <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002028:	e00a      	b.n	8002040 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7ff fb4f 	bl	80016cc <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e095      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002040:	4b4c      	ldr	r3, [pc, #304]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ee      	bne.n	800202a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d105      	bne.n	800205e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002052:	4b48      	ldr	r3, [pc, #288]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4a47      	ldr	r2, [pc, #284]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8081 	beq.w	800216a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002068:	4b42      	ldr	r3, [pc, #264]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d061      	beq.n	8002138 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d146      	bne.n	800210a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207c:	4b3f      	ldr	r3, [pc, #252]	; (800217c <HAL_RCC_OscConfig+0x4fc>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7ff fb23 	bl	80016cc <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208a:	f7ff fb1f 	bl	80016cc <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e067      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209c:	4b35      	ldr	r3, [pc, #212]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b0:	d108      	bne.n	80020c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020b2:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	492d      	ldr	r1, [pc, #180]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c4:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a19      	ldr	r1, [r3, #32]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	430b      	orrs	r3, r1
 80020d6:	4927      	ldr	r1, [pc, #156]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <HAL_RCC_OscConfig+0x4fc>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff faf3 	bl	80016cc <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7ff faef 	bl	80016cc <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e037      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fc:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x46a>
 8002108:	e02f      	b.n	800216a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <HAL_RCC_OscConfig+0x4fc>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff fadc 	bl	80016cc <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff fad8 	bl	80016cc <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e020      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x498>
 8002136:	e018      	b.n	800216a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e013      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_OscConfig+0x4f4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	429a      	cmp	r2, r3
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	40007000 	.word	0x40007000
 800217c:	42420060 	.word	0x42420060

08002180 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0d0      	b.n	8002336 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002194:	4b6a      	ldr	r3, [pc, #424]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d910      	bls.n	80021c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b67      	ldr	r3, [pc, #412]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 0207 	bic.w	r2, r3, #7
 80021aa:	4965      	ldr	r1, [pc, #404]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b63      	ldr	r3, [pc, #396]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0b8      	b.n	8002336 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d020      	beq.n	8002212 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021dc:	4b59      	ldr	r3, [pc, #356]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4a58      	ldr	r2, [pc, #352]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f4:	4b53      	ldr	r3, [pc, #332]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002200:	4b50      	ldr	r3, [pc, #320]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	494d      	ldr	r1, [pc, #308]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d040      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d115      	bne.n	800225e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e07f      	b.n	8002336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e073      	b.n	8002336 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224e:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e06b      	b.n	8002336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225e:	4b39      	ldr	r3, [pc, #228]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f023 0203 	bic.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4936      	ldr	r1, [pc, #216]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002270:	f7ff fa2c 	bl	80016cc <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	e00a      	b.n	800228e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f7ff fa28 	bl	80016cc <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e053      	b.n	8002336 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 020c 	and.w	r2, r3, #12
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	429a      	cmp	r2, r3
 800229e:	d1eb      	bne.n	8002278 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d210      	bcs.n	80022d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0207 	bic.w	r2, r3, #7
 80022b6:	4922      	ldr	r1, [pc, #136]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e032      	b.n	8002336 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4916      	ldr	r1, [pc, #88]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d009      	beq.n	800230e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	490e      	ldr	r1, [pc, #56]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800230e:	f000 f821 	bl	8002354 <HAL_RCC_GetSysClockFreq>
 8002312:	4602      	mov	r2, r0
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	490a      	ldr	r1, [pc, #40]	; (8002348 <HAL_RCC_ClockConfig+0x1c8>)
 8002320:	5ccb      	ldrb	r3, [r1, r3]
 8002322:	fa22 f303 	lsr.w	r3, r2, r3
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <HAL_RCC_ClockConfig+0x1cc>)
 8002328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_RCC_ClockConfig+0x1d0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f98a 	bl	8001648 <HAL_InitTick>

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40022000 	.word	0x40022000
 8002344:	40021000 	.word	0x40021000
 8002348:	08002c60 	.word	0x08002c60
 800234c:	20000050 	.word	0x20000050
 8002350:	20000054 	.word	0x20000054

08002354 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	2300      	movs	r3, #0
 8002368:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800236e:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b04      	cmp	r3, #4
 800237c:	d002      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x30>
 800237e:	2b08      	cmp	r3, #8
 8002380:	d003      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0x36>
 8002382:	e027      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002386:	613b      	str	r3, [r7, #16]
      break;
 8002388:	e027      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	0c9b      	lsrs	r3, r3, #18
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002394:	5cd3      	ldrb	r3, [r2, r3]
 8002396:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d010      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	0c5b      	lsrs	r3, r3, #17
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	4a11      	ldr	r2, [pc, #68]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023ae:	5cd3      	ldrb	r3, [r2, r3]
 80023b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <HAL_RCC_GetSysClockFreq+0x98>)
 80023b6:	fb02 f203 	mul.w	r2, r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e004      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023c8:	fb02 f303 	mul.w	r3, r2, r3
 80023cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	613b      	str	r3, [r7, #16]
      break;
 80023d2:	e002      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_RCC_GetSysClockFreq+0x98>)
 80023d6:	613b      	str	r3, [r7, #16]
      break;
 80023d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023da:	693b      	ldr	r3, [r7, #16]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	371c      	adds	r7, #28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	007a1200 	.word	0x007a1200
 80023f0:	08002c70 	.word	0x08002c70
 80023f4:	08002c80 	.word	0x08002c80
 80023f8:	003d0900 	.word	0x003d0900

080023fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <RCC_Delay+0x34>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <RCC_Delay+0x38>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0a5b      	lsrs	r3, r3, #9
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002418:	bf00      	nop
  }
  while (Delay --);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	60fa      	str	r2, [r7, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f9      	bne.n	8002418 <RCC_Delay+0x1c>
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	20000050 	.word	0x20000050
 8002434:	10624dd3 	.word	0x10624dd3

08002438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e041      	b.n	80024ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe ffbc 	bl	80013dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3304      	adds	r3, #4
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f000 fa56 	bl	8002928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d001      	beq.n	80024f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e035      	b.n	800255c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a16      	ldr	r2, [pc, #88]	; (8002568 <HAL_TIM_Base_Start_IT+0x90>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_TIM_Base_Start_IT+0x4e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251a:	d004      	beq.n	8002526 <HAL_TIM_Base_Start_IT+0x4e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a12      	ldr	r2, [pc, #72]	; (800256c <HAL_TIM_Base_Start_IT+0x94>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d111      	bne.n	800254a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b06      	cmp	r3, #6
 8002536:	d010      	beq.n	800255a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002548:	e007      	b.n	800255a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40012c00 	.word	0x40012c00
 800256c:	40000400 	.word	0x40000400

08002570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d020      	beq.n	80025d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01b      	beq.n	80025d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0202 	mvn.w	r2, #2
 80025a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f998 	bl	80028f0 <HAL_TIM_IC_CaptureCallback>
 80025c0:	e005      	b.n	80025ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f98b 	bl	80028de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f99a 	bl	8002902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d020      	beq.n	8002620 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01b      	beq.n	8002620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0204 	mvn.w	r2, #4
 80025f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2202      	movs	r2, #2
 80025f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f972 	bl	80028f0 <HAL_TIM_IC_CaptureCallback>
 800260c:	e005      	b.n	800261a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f965 	bl	80028de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f974 	bl	8002902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d020      	beq.n	800266c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01b      	beq.n	800266c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0208 	mvn.w	r2, #8
 800263c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2204      	movs	r2, #4
 8002642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f94c 	bl	80028f0 <HAL_TIM_IC_CaptureCallback>
 8002658:	e005      	b.n	8002666 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f93f 	bl	80028de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f94e 	bl	8002902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d020      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01b      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0210 	mvn.w	r2, #16
 8002688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2208      	movs	r2, #8
 800268e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f926 	bl	80028f0 <HAL_TIM_IC_CaptureCallback>
 80026a4:	e005      	b.n	80026b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f919 	bl	80028de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f928 	bl	8002902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00c      	beq.n	80026dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0201 	mvn.w	r2, #1
 80026d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fd9a 	bl	8001210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00c      	beq.n	8002700 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d007      	beq.n	8002700 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fa6f 	bl	8002bde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00c      	beq.n	8002724 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8f8 	bl	8002914 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0220 	mvn.w	r2, #32
 8002740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fa42 	bl	8002bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_TIM_ConfigClockSource+0x1c>
 8002768:	2302      	movs	r3, #2
 800276a:	e0b4      	b.n	80028d6 <HAL_TIM_ConfigClockSource+0x186>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800278a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a4:	d03e      	beq.n	8002824 <HAL_TIM_ConfigClockSource+0xd4>
 80027a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027aa:	f200 8087 	bhi.w	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b2:	f000 8086 	beq.w	80028c2 <HAL_TIM_ConfigClockSource+0x172>
 80027b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ba:	d87f      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b70      	cmp	r3, #112	; 0x70
 80027be:	d01a      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0xa6>
 80027c0:	2b70      	cmp	r3, #112	; 0x70
 80027c2:	d87b      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027c4:	2b60      	cmp	r3, #96	; 0x60
 80027c6:	d050      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x11a>
 80027c8:	2b60      	cmp	r3, #96	; 0x60
 80027ca:	d877      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b50      	cmp	r3, #80	; 0x50
 80027ce:	d03c      	beq.n	800284a <HAL_TIM_ConfigClockSource+0xfa>
 80027d0:	2b50      	cmp	r3, #80	; 0x50
 80027d2:	d873      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	d058      	beq.n	800288a <HAL_TIM_ConfigClockSource+0x13a>
 80027d8:	2b40      	cmp	r3, #64	; 0x40
 80027da:	d86f      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b30      	cmp	r3, #48	; 0x30
 80027de:	d064      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x15a>
 80027e0:	2b30      	cmp	r3, #48	; 0x30
 80027e2:	d86b      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d060      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x15a>
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d867      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d05c      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x15a>
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d05a      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x15a>
 80027f4:	e062      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f000 f96a 	bl	8002ade <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002818:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	609a      	str	r2, [r3, #8]
      break;
 8002822:	e04f      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6899      	ldr	r1, [r3, #8]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f000 f953 	bl	8002ade <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002846:	609a      	str	r2, [r3, #8]
      break;
 8002848:	e03c      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6859      	ldr	r1, [r3, #4]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	461a      	mov	r2, r3
 8002858:	f000 f8ca 	bl	80029f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2150      	movs	r1, #80	; 0x50
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f921 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 8002868:	e02c      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6859      	ldr	r1, [r3, #4]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	461a      	mov	r2, r3
 8002878:	f000 f8e8 	bl	8002a4c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2160      	movs	r1, #96	; 0x60
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f911 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 8002888:	e01c      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	461a      	mov	r2, r3
 8002898:	f000 f8aa 	bl	80029f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2140      	movs	r1, #64	; 0x40
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f901 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 80028a8:	e00c      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f000 f8f8 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 80028ba:	e003      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
      break;
 80028c0:	e000      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
	...

08002928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a2b      	ldr	r2, [pc, #172]	; (80029e8 <TIM_Base_SetConfig+0xc0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d007      	beq.n	8002950 <TIM_Base_SetConfig+0x28>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d003      	beq.n	8002950 <TIM_Base_SetConfig+0x28>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a28      	ldr	r2, [pc, #160]	; (80029ec <TIM_Base_SetConfig+0xc4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d108      	bne.n	8002962 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a20      	ldr	r2, [pc, #128]	; (80029e8 <TIM_Base_SetConfig+0xc0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <TIM_Base_SetConfig+0x52>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002970:	d003      	beq.n	800297a <TIM_Base_SetConfig+0x52>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <TIM_Base_SetConfig+0xc4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d108      	bne.n	800298c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a0d      	ldr	r2, [pc, #52]	; (80029e8 <TIM_Base_SetConfig+0xc0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d103      	bne.n	80029c0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f023 0201 	bic.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	611a      	str	r2, [r3, #16]
  }
}
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	40012c00 	.word	0x40012c00
 80029ec:	40000400 	.word	0x40000400

080029f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f023 0201 	bic.w	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f023 030a 	bic.w	r3, r3, #10
 8002a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	621a      	str	r2, [r3, #32]
}
 8002a42:	bf00      	nop
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	f023 0210 	bic.w	r2, r3, #16
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	031b      	lsls	r3, r3, #12
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	621a      	str	r2, [r3, #32]
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f043 0307 	orr.w	r3, r3, #7
 8002acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	609a      	str	r2, [r3, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b087      	sub	sp, #28
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002af8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	021a      	lsls	r2, r3, #8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	609a      	str	r2, [r3, #8]
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e041      	b.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d009      	beq.n	8002b8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b80:	d004      	beq.n	8002b8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a10      	ldr	r2, [pc, #64]	; (8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d10c      	bne.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40000400 	.word	0x40000400

08002bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <__libc_init_array>:
 8002bf0:	b570      	push	{r4, r5, r6, lr}
 8002bf2:	2600      	movs	r6, #0
 8002bf4:	4d0c      	ldr	r5, [pc, #48]	; (8002c28 <__libc_init_array+0x38>)
 8002bf6:	4c0d      	ldr	r4, [pc, #52]	; (8002c2c <__libc_init_array+0x3c>)
 8002bf8:	1b64      	subs	r4, r4, r5
 8002bfa:	10a4      	asrs	r4, r4, #2
 8002bfc:	42a6      	cmp	r6, r4
 8002bfe:	d109      	bne.n	8002c14 <__libc_init_array+0x24>
 8002c00:	f000 f822 	bl	8002c48 <_init>
 8002c04:	2600      	movs	r6, #0
 8002c06:	4d0a      	ldr	r5, [pc, #40]	; (8002c30 <__libc_init_array+0x40>)
 8002c08:	4c0a      	ldr	r4, [pc, #40]	; (8002c34 <__libc_init_array+0x44>)
 8002c0a:	1b64      	subs	r4, r4, r5
 8002c0c:	10a4      	asrs	r4, r4, #2
 8002c0e:	42a6      	cmp	r6, r4
 8002c10:	d105      	bne.n	8002c1e <__libc_init_array+0x2e>
 8002c12:	bd70      	pop	{r4, r5, r6, pc}
 8002c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c18:	4798      	blx	r3
 8002c1a:	3601      	adds	r6, #1
 8002c1c:	e7ee      	b.n	8002bfc <__libc_init_array+0xc>
 8002c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c22:	4798      	blx	r3
 8002c24:	3601      	adds	r6, #1
 8002c26:	e7f2      	b.n	8002c0e <__libc_init_array+0x1e>
 8002c28:	08002c84 	.word	0x08002c84
 8002c2c:	08002c84 	.word	0x08002c84
 8002c30:	08002c84 	.word	0x08002c84
 8002c34:	08002c88 	.word	0x08002c88

08002c38 <memset>:
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4402      	add	r2, r0
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d100      	bne.n	8002c42 <memset+0xa>
 8002c40:	4770      	bx	lr
 8002c42:	f803 1b01 	strb.w	r1, [r3], #1
 8002c46:	e7f9      	b.n	8002c3c <memset+0x4>

08002c48 <_init>:
 8002c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4a:	bf00      	nop
 8002c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4e:	bc08      	pop	{r3}
 8002c50:	469e      	mov	lr, r3
 8002c52:	4770      	bx	lr

08002c54 <_fini>:
 8002c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c56:	bf00      	nop
 8002c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5a:	bc08      	pop	{r3}
 8002c5c:	469e      	mov	lr, r3
 8002c5e:	4770      	bx	lr
